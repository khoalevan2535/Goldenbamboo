// import { apiClient } from '../utils/apiClient';

// Interface cho d·ªØ li·ªáu t·ª´ API Giao H√†ng Ti·∫øt Ki·ªám
export interface GHTKProvince {
  id: string;
  name: string;
}

export interface GHTKDistrict {
  id: string;
  name: string;
  province_id: string;
}

export interface GHTKWard {
  id: string;
  name: string;
  district_id: string;
}

export interface GHTKAddress {
  id?: string;
  name?: string;
  address: string;
  province: string;
  district: string;
  ward: string;
  hamlet?: string;
  recipientName?: string;
  phoneNumber?: string;
  phone?: string;
  note?: string;
}

export interface GHTKDeliveryFee {
  fee: number;
  insurance_fee: number;
  total_fee: number;
  estimated_delivery_time: string;
  distance?: number; // Kho·∫£ng c√°ch t√≠nh b·∫±ng km
}

export interface GHTKOrderRequest {
  products: Array<{
    name: string;
    weight: number;
    quantity: number;
    price: number;
    product_code?: string;
  }>;
  order: {
    id: string;
    booking_id: string;
    pick_name: string;
    pick_address: string;
    pick_province: string;
    pick_district: string;
    pick_ward: string;
    pick_tel: string;
    name: string;
    address: string;
    province: string;
    district: string;
    ward: string;
    hamlet: string;
    tel: string;
    note?: string;
    value: number;
    transport: string;
    pick_option: string;
    deliver_option: string;
    is_freeship: string;
    pick_money: number;
    pick_date?: string;
  };
}

export interface GHTKOrderResponse {
  success: boolean;
  message: string;
  order: {
    label: string;
    partner_id: string;
    status: string;
    fee: number;
    insurance_fee: number;
    estimated_pick_time: string;
    estimated_deliver_time: string;
  };
}

interface GHTKService {
  // L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
  getProvinces(): Promise<GHTKProvince[]>;
  
  // L·∫•y danh s√°ch qu·∫≠n/huy·ªán theo t·ªânh
  getDistricts(provinceId: string): Promise<GHTKDistrict[]>;
  
  // L·∫•y danh s√°ch ph∆∞·ªùng/x√£ theo qu·∫≠n/huy·ªán
  getWards(districtId: string): Promise<GHTKWard[]>;
  
  // T√≠nh ph√≠ v·∫≠n chuy·ªÉn
  calculateDeliveryFee(address: GHTKAddress): Promise<GHTKDeliveryFee>;
  
  // T√¨m ki·∫øm ƒë·ªãa ch·ªâ
  searchAddress(query: string): Promise<GHTKAddress[]>;
  
  // T·∫°o ƒë∆°n h√†ng GHTK
  createOrder(orderData: GHTKOrderRequest): Promise<GHTKOrderResponse>;
  
  // Test API connection
  testConnection(): Promise<boolean>;
}

class GHTKServiceImpl implements GHTKService {
  private readonly baseUrl = 'https://services.giaohangtietkiem.vn';
  private readonly token = (window as any).process?.env?.REACT_APP_GHTK_TOKEN || '2PTFBbdxAOlckOkaJteuXNMiwQCZ7ck6qQ99J2E'; // Token t·ª´ ·∫£nh b·∫°n g·ª≠i
  private readonly partnerCode = (window as any).process?.env?.REACT_APP_GHTK_PARTNER_CODE || 'S22737331'; // Partner code t·ª´ ·∫£nh

  private getHeaders() {
    return {
      'Token': this.token,
      'X-Client-Source': this.partnerCode,
      'Content-Type': 'application/json'
    };
  }

  async getProvinces(): Promise<GHTKProvince[]> {
    try {
      // console.log('üåç Fetching provinces from GHTK API...');
      
      // G·ªçi backend API ƒë·ªÉ l·∫•y danh s√°ch t·ªânh
      const backendUrl = (window as any).process?.env?.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';
      const response = await fetch(`${backendUrl}/client/orders/ghtk/provinces`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const responseData = await response.json();
        // console.log('‚úÖ Raw GHTK API response:', responseData);
        
        // Parse d·ªØ li·ªáu t·ª´ GHTK API - c√≥ th·ªÉ l√† Object ho·∫∑c Array
        let provinces: GHTKProvince[] = [];
        
        if (Array.isArray(responseData)) {
          provinces = responseData;
        } else if (responseData && typeof responseData === 'object') {
          // N·∫øu l√† Object, c√≥ th·ªÉ c√≥ key 'data' ho·∫∑c 'provinces'
          if (responseData.data && Array.isArray(responseData.data)) {
            provinces = responseData.data;
          } else if (responseData.provinces && Array.isArray(responseData.provinces)) {
            provinces = responseData.provinces;
          } else {
            // N·∫øu l√† Object v·ªõi c√°c key l√† ID, convert th√†nh Array
            provinces = Object.keys(responseData).map(key => ({
              id: key,
              name: responseData[key].name || responseData[key].title || key
            }));
          }
        }
        
        // console.log('‚úÖ Parsed provinces:', provinces);
        
        // N·∫øu ch·ªâ c√≥ 1 province, c√≥ th·ªÉ API ch∆∞a ho·∫°t ƒë·ªông ƒë√∫ng, d√πng mock data
        if (provinces.length <= 1) {
          console.warn('‚ö†Ô∏è API returned only 1 province, using mock data instead');
          return this.getMockProvinces();
        }
        
        console.log('‚úÖ GHTK API: Loaded', provinces.length, 'provinces successfully');
        
        return provinces;
      } else {
        console.warn('‚ö†Ô∏è GHTK API failed, using mock data');
        return this.getMockProvinces();
      }
    } catch (error) {
      console.error('‚ùå Error fetching provinces:', error);
      // console.log('üîÑ Using mock data as fallback');
      return this.getMockProvinces();
    }
  }

  async getDistricts(provinceId: string): Promise<GHTKDistrict[]> {
    try {
      console.log('üèôÔ∏è Fetching districts for province:', provinceId);
      
      // G·ªçi backend API ƒë·ªÉ l·∫•y danh s√°ch qu·∫≠n/huy·ªán
      const backendUrl = (window as any).process?.env?.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';
      const response = await fetch(`${backendUrl}/client/orders/ghtk/districts?provinceId=${provinceId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const responseData = await response.json();
        console.log('‚úÖ Raw GHTK districts response:', responseData);
        
        // Parse d·ªØ li·ªáu t·ª´ GHTK API
        let districts: GHTKDistrict[] = [];
        
        if (Array.isArray(responseData)) {
          districts = responseData;
        } else if (responseData && typeof responseData === 'object') {
          if (responseData.data && Array.isArray(responseData.data)) {
            districts = responseData.data;
          } else if (responseData.districts && Array.isArray(responseData.districts)) {
            districts = responseData.districts;
          } else {
            // Convert Object th√†nh Array
            districts = Object.keys(responseData).map(key => ({
              id: key,
              name: responseData[key].name || responseData[key].title || key,
              province_id: provinceId
            }));
          }
        }
        
        console.log('‚úÖ Parsed districts:', districts);
        
        // N·∫øu ch·ªâ c√≥ 1 district ho·∫∑c √≠t, c√≥ th·ªÉ API ch∆∞a ho·∫°t ƒë·ªông ƒë√∫ng, d√πng mock data
        if (districts.length <= 1) {
          console.warn('‚ö†Ô∏è API returned only 1 district, using mock data instead');
          return this.getMockDistricts(provinceId);
        }
        
        return districts;
      } else {
        console.warn('‚ö†Ô∏è GHTK API failed, using mock data');
      return this.getMockDistricts(provinceId);
      }
    } catch (error) {
      console.error('‚ùå Error fetching districts:', error);
      return this.getMockDistricts(provinceId);
    }
  }

  async getWards(districtId: string): Promise<GHTKWard[]> {
    try {
      console.log('üèòÔ∏è Fetching wards for district:', districtId);
      
      // G·ªçi backend API ƒë·ªÉ l·∫•y danh s√°ch ph∆∞·ªùng/x√£
      const backendUrl = (window as any).process?.env?.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';
      const response = await fetch(`${backendUrl}/client/orders/ghtk/wards?districtId=${districtId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const responseData = await response.json();
        console.log('‚úÖ Raw GHTK wards response:', responseData);
        
        // Parse d·ªØ li·ªáu t·ª´ GHTK API
        let wards: GHTKWard[] = [];
        
        if (Array.isArray(responseData)) {
          wards = responseData;
        } else if (responseData && typeof responseData === 'object') {
          if (responseData.data && Array.isArray(responseData.data)) {
            wards = responseData.data;
          } else if (responseData.wards && Array.isArray(responseData.wards)) {
            wards = responseData.wards;
          } else {
            // Convert Object th√†nh Array
            wards = Object.keys(responseData).map(key => ({
              id: key,
              name: responseData[key].name || responseData[key].title || key,
              district_id: districtId
            }));
          }
        }
        
        console.log('‚úÖ Parsed wards:', wards);
        
        // N·∫øu ch·ªâ c√≥ 1 ward ho·∫∑c √≠t, c√≥ th·ªÉ API ch∆∞a ho·∫°t ƒë·ªông ƒë√∫ng, d√πng mock data
        if (wards.length <= 1) {
          console.warn('‚ö†Ô∏è API returned only 1 ward, using mock data instead');
          return this.getMockWards(districtId);
        }
        
        return wards;
      } else {
        console.warn('‚ö†Ô∏è GHTK API failed, using mock data');
      return this.getMockWards(districtId);
      }
    } catch (error) {
      console.error('‚ùå Error fetching wards:', error);
      return this.getMockWards(districtId);
    }
  }

  async calculateDeliveryFee(address: GHTKAddress): Promise<GHTKDeliveryFee> {
    try {
      // T√≠nh ph√≠ d·ª±a tr√™n kho·∫£ng c√°ch t·ª´ chi nh√°nh
      const branchLocation = this.getBranchLocation(); // V·ªã tr√≠ chi nh√°nh
      const deliveryLocation = this.getLocationFromAddress(address); // V·ªã tr√≠ giao h√†ng
      
      const distance = this.calculateDistance(branchLocation, deliveryLocation);
      
      // T√≠nh ph√≠ d·ª±a tr√™n kho·∫£ng c√°ch
      let baseFee = 15000; // Ph√≠ c∆° b·∫£n
      let estimatedTime = '1-2 ng√†y';
      
      if (distance <= 5) {
        // Trong th√†nh ph·ªë (‚â§ 5km)
        baseFee = 15000;
        estimatedTime = '1 ng√†y';
      } else if (distance <= 15) {
        // Ngo·∫°i th√†nh (5-15km)
        baseFee = 25000;
        estimatedTime = '1-2 ng√†y';
      } else if (distance <= 50) {
        // T·ªânh l√¢n c·∫≠n (15-50km)
        baseFee = 35000;
        estimatedTime = '2-3 ng√†y';
      } else {
        // Xa h∆°n (> 50km)
        baseFee = 50000;
        estimatedTime = '3-5 ng√†y';
      }
      
      // Ph√≠ theo c√¢n n·∫∑ng (mock)
      const weight = 1000; // gram
      const weightFee = Math.ceil(weight / 1000) * 2000;
      const totalFee = baseFee + weightFee;
      
      return {
        fee: baseFee,
        insurance_fee: 0,
        total_fee: totalFee,
        estimated_delivery_time: estimatedTime,
        distance: distance
      };
    } catch (error) {
      console.error('Error calculating delivery fee:', error);
      throw error;
    }
  }

  // Helper methods for distance calculation
  private getBranchLocation() {
    // Mock v·ªã tr√≠ chi nh√°nh (C·∫ßn Th∆°)
    return {
      lat: 10.0452,
      lng: 105.7469
    };
  }

  private getLocationFromAddress(address: GHTKAddress) {
    // Mock v·ªã tr√≠ d·ª±a tr√™n t·ªânh/th√†nh ph·ªë
    const locationMap: { [key: string]: { lat: number, lng: number } } = {
      '1': { lat: 21.0285, lng: 105.8542 }, // H√† N·ªôi
      '2': { lat: 10.8231, lng: 106.6297 }, // TP.HCM
      '3': { lat: 10.0452, lng: 105.7469 }, // C·∫ßn Th∆°
      '61': { lat: 16.0544, lng: 108.2022 }, // ƒê√† N·∫µng
      '62': { lat: 20.8449, lng: 106.6881 }, // H·∫£i Ph√≤ng
    };
    
    return locationMap[address.province] || { lat: 10.0452, lng: 105.7469 }; // Default: C·∫ßn Th∆°
  }

  private calculateDistance(loc1: { lat: number, lng: number }, loc2: { lat: number, lng: number }) {
    // Haversine formula ƒë·ªÉ t√≠nh kho·∫£ng c√°ch
    const R = 6371; // B√°n k√≠nh Tr√°i ƒê·∫•t (km)
    const dLat = this.toRadians(loc2.lat - loc1.lat);
    const dLng = this.toRadians(loc2.lng - loc1.lng);
    
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(this.toRadians(loc1.lat)) * Math.cos(this.toRadians(loc2.lat)) *
              Math.sin(dLng / 2) * Math.sin(dLng / 2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;
    
    return Math.round(distance * 10) / 10; // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
  }

  private toRadians(degrees: number) {
    return degrees * (Math.PI / 180);
  }

  async searchAddress(query: string): Promise<GHTKAddress[]> {
    try {
      // S·ª≠ d·ª•ng API t√¨m ki·∫øm ƒë·ªãa ch·ªâ ho·∫∑c mock data
      return this.getMockAddresses(query);
    } catch (error) {
      console.error('Error searching address:', error);
      return [];
    }
  }

  async createOrder(orderData: GHTKOrderRequest): Promise<GHTKOrderResponse> {
    try {
      console.log('üöö Creating GHTK order with data:', orderData);
      
      // G·ªçi backend API thay v√¨ g·ªçi tr·ª±c ti·∫øp GHTK API
      const backendUrl = (window as any).process?.env?.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';
      const response = await fetch(`${backendUrl}/ghtk/create-order`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
      });

      console.log('üì° Backend API response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Backend API error response:', errorText);
        throw new Error(`Backend API error! Status: ${response.status}, Message: ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ GHTK order created successfully via backend:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå Error creating GHTK order:', error);
      throw error;
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      console.log('üß™ Testing GHTK API connection via backend...');
      
      // G·ªçi backend API ƒë·ªÉ test connection
      const backendUrl = (window as any).process?.env?.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';
      const response = await fetch(`${backendUrl}/ghtk/test-connection`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      console.log('üì° Backend test response status:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ GHTK API connection test result:', result);
        return result;
      } else {
        console.error('‚ùå Backend test connection failed:', response.status);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Backend test connection error:', error);
      return false;
    }
  }

  // Mock data methods - thay th·∫ø b·∫±ng API th·ª±c t·∫ø
  private getMockProvinces(): GHTKProvince[] {
    // console.log('üîÑ Loading mock provinces data...');
    const mockData = [
      { id: '1', name: 'Th√†nh ph·ªë H√† N·ªôi' },
      { id: '2', name: 'Th√†nh ph·ªë H·ªì Ch√≠ Minh' },
      { id: '3', name: 'Th√†nh ph·ªë C·∫ßn Th∆°' },
      { id: '4', name: 'T·ªânh An Giang' },
      { id: '5', name: 'T·ªânh B√† R·ªãa - V≈©ng T√†u' },
      { id: '6', name: 'T·ªânh B·∫°c Li√™u' },
      { id: '7', name: 'T·ªânh B·∫Øc Giang' },
      { id: '8', name: 'T·ªânh B·∫Øc K·∫°n' },
      { id: '9', name: 'T·ªânh B·∫Øc Ninh' },
      { id: '10', name: 'T·ªânh B·∫øn Tre' },
      { id: '11', name: 'T·ªânh B√¨nh D∆∞∆°ng' },
      { id: '12', name: 'T·ªânh B√¨nh Ph∆∞·ªõc' },
      { id: '13', name: 'T·ªânh B√¨nh Thu·∫≠n' },
      { id: '14', name: 'T·ªânh C√† Mau' },
      { id: '15', name: 'T·ªânh Cao B·∫±ng' },
      { id: '16', name: 'T·ªânh ƒê·∫Øk L·∫Øk' },
      { id: '17', name: 'T·ªânh ƒê·∫Øk N√¥ng' },
      { id: '18', name: 'T·ªânh ƒêi·ªán Bi√™n' },
      { id: '19', name: 'T·ªânh ƒê·ªìng Nai' },
      { id: '20', name: 'T·ªânh ƒê·ªìng Th√°p' },
      { id: '21', name: 'T·ªânh Gia Lai' },
      { id: '22', name: 'T·ªânh H√† Giang' },
      { id: '23', name: 'T·ªânh H√† Nam' },
      { id: '24', name: 'T·ªânh H√† Tƒ©nh' },
      { id: '25', name: 'T·ªânh H·∫£i D∆∞∆°ng' },
      { id: '26', name: 'T·ªânh H·∫≠u Giang' },
      { id: '27', name: 'T·ªânh H√≤a B√¨nh' },
      { id: '28', name: 'T·ªânh H∆∞ng Y√™n' },
      { id: '29', name: 'T·ªânh Kh√°nh H√≤a' },
      { id: '30', name: 'T·ªânh Ki√™n Giang' },
      { id: '31', name: 'T·ªânh Kon Tum' },
      { id: '32', name: 'T·ªânh Lai Ch√¢u' },
      { id: '33', name: 'T·ªânh L√¢m ƒê·ªìng' },
      { id: '34', name: 'T·ªânh L·∫°ng S∆°n' },
      { id: '35', name: 'T·ªânh L√†o Cai' },
      { id: '36', name: 'T·ªânh Long An' },
      { id: '37', name: 'T·ªânh Nam ƒê·ªãnh' },
      { id: '38', name: 'T·ªânh Ngh·ªá An' },
      { id: '39', name: 'T·ªânh Ninh B√¨nh' },
      { id: '40', name: 'T·ªânh Ninh Thu·∫≠n' },
      { id: '41', name: 'T·ªânh Ph√∫ Th·ªç' },
      { id: '42', name: 'T·ªânh Ph√∫ Y√™n' },
      { id: '43', name: 'T·ªânh Qu·∫£ng B√¨nh' },
      { id: '44', name: 'T·ªânh Qu·∫£ng Nam' },
      { id: '45', name: 'T·ªânh Qu·∫£ng Ng√£i' },
      { id: '46', name: 'T·ªânh Qu·∫£ng Ninh' },
      { id: '47', name: 'T·ªânh Qu·∫£ng Tr·ªã' },
      { id: '48', name: 'T·ªânh S√≥c TrƒÉng' },
      { id: '49', name: 'T·ªânh S∆°n La' },
      { id: '50', name: 'T·ªânh T√¢y Ninh' },
      { id: '51', name: 'T·ªânh Th√°i B√¨nh' },
      { id: '52', name: 'T·ªânh Th√°i Nguy√™n' },
      { id: '53', name: 'T·ªânh Thanh H√≥a' },
      { id: '54', name: 'T·ªânh Th·ª´a Thi√™n Hu·∫ø' },
      { id: '55', name: 'T·ªânh Ti·ªÅn Giang' },
      { id: '56', name: 'T·ªânh Tr√† Vinh' },
      { id: '57', name: 'T·ªânh Tuy√™n Quang' },
      { id: '58', name: 'T·ªânh Vƒ©nh Long' },
      { id: '59', name: 'T·ªânh Vƒ©nh Ph√∫c' },
      { id: '60', name: 'T·ªânh Y√™n B√°i' },
      { id: '61', name: 'Th√†nh ph·ªë ƒê√† N·∫µng' },
      { id: '62', name: 'Th√†nh ph·ªë H·∫£i Ph√≤ng' },
      { id: '63', name: 'Th√†nh ph·ªë Th√°i Nguy√™n' }
    ];
    console.log('‚úÖ Mock data: Loaded', mockData.length, 'provinces');
    return mockData;
  }

  private getMockDistricts(provinceId: string): GHTKDistrict[] {
    // console.log('üîÑ Loading mock districts for province:', provinceId);
    const districts: { [key: string]: GHTKDistrict[] } = {
      '1': [ // H√† N·ªôi
        { id: '1', name: 'Qu·∫≠n Ba ƒê√¨nh', province_id: '1' },
        { id: '2', name: 'Qu·∫≠n Ho√†n Ki·∫øm', province_id: '1' },
        { id: '3', name: 'Qu·∫≠n T√¢y H·ªì', province_id: '1' },
        { id: '4', name: 'Qu·∫≠n Long Bi√™n', province_id: '1' },
        { id: '5', name: 'Qu·∫≠n C·∫ßu Gi·∫•y', province_id: '1' },
        { id: '6', name: 'Qu·∫≠n ƒê·ªëng ƒêa', province_id: '1' },
        { id: '7', name: 'Qu·∫≠n Hai B√† Tr∆∞ng', province_id: '1' },
        { id: '8', name: 'Qu·∫≠n Ho√†ng Mai', province_id: '1' },
        { id: '9', name: 'Qu·∫≠n Thanh Xu√¢n', province_id: '1' },
        { id: '10', name: 'Qu·∫≠n Nam T·ª´ Li√™m', province_id: '1' },
        { id: '11', name: 'Qu·∫≠n B·∫Øc T·ª´ Li√™m', province_id: '1' },
        { id: '12', name: 'Qu·∫≠n H√† ƒê√¥ng', province_id: '1' },
        { id: '13', name: 'Qu·∫≠n S∆°n T√¢y', province_id: '1' }
      ],
      '2': [ // TP.HCM
        { id: '20', name: 'Qu·∫≠n 1', province_id: '2' },
        { id: '21', name: 'Qu·∫≠n 2', province_id: '2' },
        { id: '22', name: 'Qu·∫≠n 3', province_id: '2' },
        { id: '23', name: 'Qu·∫≠n 4', province_id: '2' },
        { id: '24', name: 'Qu·∫≠n 5', province_id: '2' },
        { id: '25', name: 'Qu·∫≠n 6', province_id: '2' },
        { id: '26', name: 'Qu·∫≠n 7', province_id: '2' },
        { id: '27', name: 'Qu·∫≠n 8', province_id: '2' },
        { id: '28', name: 'Qu·∫≠n 9', province_id: '2' },
        { id: '29', name: 'Qu·∫≠n 10', province_id: '2' },
        { id: '30', name: 'Qu·∫≠n 11', province_id: '2' },
        { id: '31', name: 'Qu·∫≠n 12', province_id: '2' },
        { id: '32', name: 'Qu·∫≠n Th·ªß ƒê·ª©c', province_id: '2' },
        { id: '33', name: 'Qu·∫≠n G√≤ V·∫•p', province_id: '2' },
        { id: '34', name: 'Qu·∫≠n B√¨nh Th·∫°nh', province_id: '2' },
        { id: '35', name: 'Qu·∫≠n T√¢n B√¨nh', province_id: '2' },
        { id: '36', name: 'Qu·∫≠n T√¢n Ph√∫', province_id: '2' },
        { id: '37', name: 'Qu·∫≠n Ph√∫ Nhu·∫≠n', province_id: '2' }
      ],
      '3': [ // C·∫ßn Th∆°
        { id: '40', name: 'Qu·∫≠n Ninh Ki·ªÅu', province_id: '3' },
        { id: '41', name: 'Qu·∫≠n √î M√¥n', province_id: '3' },
        { id: '42', name: 'Qu·∫≠n B√¨nh Th·ªßy', province_id: '3' },
        { id: '43', name: 'Qu·∫≠n C√°i RƒÉng', province_id: '3' },
        { id: '44', name: 'Qu·∫≠n Th·ªët N·ªët', province_id: '3' },
        { id: '45', name: 'Huy·ªán Vƒ©nh Th·∫°nh', province_id: '3' },
        { id: '46', name: 'Huy·ªán C·ªù ƒê·ªè', province_id: '3' },
        { id: '47', name: 'Huy·ªán Phong ƒêi·ªÅn', province_id: '3' },
        { id: '48', name: 'Huy·ªán Th·ªõi Lai', province_id: '3' }
      ],
      '4': [ // An Giang
        { id: '50', name: 'Th√†nh ph·ªë Long Xuy√™n', province_id: '4' },
        { id: '51', name: 'Th√†nh ph·ªë Ch√¢u ƒê·ªëc', province_id: '4' },
        { id: '52', name: 'Huy·ªán An Ph√∫', province_id: '4' },
        { id: '53', name: 'Huy·ªán Ch√¢u Ph√∫', province_id: '4' },
        { id: '54', name: 'Huy·ªán Ch√¢u Th√†nh', province_id: '4' },
        { id: '55', name: 'Huy·ªán Ch·ª£ M·ªõi', province_id: '4' },
        { id: '56', name: 'Huy·ªán Ph√∫ T√¢n', province_id: '4' },
        { id: '57', name: 'Huy·ªán Tho·∫°i S∆°n', province_id: '4' },
        { id: '58', name: 'Huy·ªán Tri T√¥n', province_id: '4' },
        { id: '59', name: 'Huy·ªán T·ªãnh Bi√™n', province_id: '4' }
      ],
      '5': [ // B√† R·ªãa - V≈©ng T√†u
        { id: '60', name: 'Th√†nh ph·ªë V≈©ng T√†u', province_id: '5' },
        { id: '61', name: 'Th√†nh ph·ªë B√† R·ªãa', province_id: '5' },
        { id: '62', name: 'Huy·ªán Ch√¢u ƒê·ª©c', province_id: '5' },
        { id: '63', name: 'Huy·ªán C√¥n ƒê·∫£o', province_id: '5' },
        { id: '64', name: 'Huy·ªán ƒê·∫•t ƒê·ªè', province_id: '5' },
        { id: '65', name: 'Huy·ªán Long ƒêi·ªÅn', province_id: '5' },
        { id: '66', name: 'Huy·ªán T√¢n Th√†nh', province_id: '5' },
        { id: '67', name: 'Huy·ªán Xuy√™n M·ªôc', province_id: '5' }
      ],
      '61': [ // ƒê√† N·∫µng
        { id: '70', name: 'Qu·∫≠n H·∫£i Ch√¢u', province_id: '61' },
        { id: '71', name: 'Qu·∫≠n Thanh Kh√™', province_id: '61' },
        { id: '72', name: 'Qu·∫≠n S∆°n Tr√†', province_id: '61' },
        { id: '73', name: 'Qu·∫≠n Ng≈© H√†nh S∆°n', province_id: '61' },
        { id: '74', name: 'Qu·∫≠n Li√™n Chi·ªÉu', province_id: '61' },
        { id: '75', name: 'Qu·∫≠n C·∫©m L·ªá', province_id: '61' },
        { id: '76', name: 'Huy·ªán H√≤a Vang', province_id: '61' },
        { id: '77', name: 'Huy·ªán Ho√†ng Sa', province_id: '61' }
      ],
      '62': [ // H·∫£i Ph√≤ng
        { id: '80', name: 'Qu·∫≠n H·ªìng B√†ng', province_id: '62' },
        { id: '81', name: 'Qu·∫≠n Ng√¥ Quy·ªÅn', province_id: '62' },
        { id: '82', name: 'Qu·∫≠n L√™ Ch√¢n', province_id: '62' },
        { id: '83', name: 'Qu·∫≠n H·∫£i An', province_id: '62' },
        { id: '84', name: 'Qu·∫≠n Ki·∫øn An', province_id: '62' },
        { id: '85', name: 'Qu·∫≠n ƒê·ªì S∆°n', province_id: '62' },
        { id: '86', name: 'Qu·∫≠n D∆∞∆°ng Kinh', province_id: '62' },
        { id: '87', name: 'Huy·ªán Thu·ª∑ Nguy√™n', province_id: '62' },
        { id: '88', name: 'Huy·ªán An D∆∞∆°ng', province_id: '62' },
        { id: '89', name: 'Huy·ªán An L√£o', province_id: '62' },
        { id: '90', name: 'Huy·ªán Ki·∫øn Thu·ªµ', province_id: '62' },
        { id: '91', name: 'Huy·ªán Ti√™n L√£ng', province_id: '62' },
        { id: '92', name: 'Huy·ªán Vƒ©nh B·∫£o', province_id: '62' },
        { id: '93', name: 'Huy·ªán C√°t H·∫£i', province_id: '62' },
        { id: '94', name: 'Huy·ªán B·∫°ch Long Vƒ©', province_id: '62' }
      ]
    };
    
    const result = districts[provinceId] || [];
    // console.log('‚úÖ Mock districts loaded:', result.length, 'districts for province', provinceId);
    return result;
  }

  private getMockWards(districtId: string): GHTKWard[] {
    // console.log('üîÑ Loading mock wards for district:', districtId);
    const wards: { [key: string]: GHTKWard[] } = {
      '1': [ // Ba ƒê√¨nh
        { id: '1', name: 'Ph∆∞·ªùng Ph√∫c X√°', district_id: '1' },
        { id: '2', name: 'Ph∆∞·ªùng Tr√∫c B·∫°ch', district_id: '1' },
        { id: '3', name: 'Ph∆∞·ªùng Vƒ©nh Ph√∫', district_id: '1' },
        { id: '4', name: 'Ph∆∞·ªùng C·ªëng V·ªã', district_id: '1' },
        { id: '5', name: 'Ph∆∞·ªùng Li·ªÖu Giai', district_id: '1' },
        { id: '6', name: 'Ph∆∞·ªùng Nguy·ªÖn Trung Tr·ª±c', district_id: '1' },
        { id: '7', name: 'Ph∆∞·ªùng Qu√°n Th√°nh', district_id: '1' },
        { id: '8', name: 'Ph∆∞·ªùng Ng·ªçc H√†', district_id: '1' },
        { id: '9', name: 'Ph∆∞·ªùng ƒêi·ªán Bi√™n', district_id: '1' },
        { id: '10', name: 'Ph∆∞·ªùng ƒê·ªôi C·∫•n', district_id: '1' }
      ],
      '2': [ // Ho√†n Ki·∫øm
        { id: '11', name: 'Ph∆∞·ªùng Ph√∫c T√¢n', district_id: '2' },
        { id: '12', name: 'Ph∆∞·ªùng ƒê·ªìng Xu√¢n', district_id: '2' },
        { id: '13', name: 'Ph∆∞·ªùng H√†ng M√£', district_id: '2' },
        { id: '14', name: 'Ph∆∞·ªùng H√†ng Bu·ªìm', district_id: '2' },
        { id: '15', name: 'Ph∆∞·ªùng H√†ng ƒê√†o', district_id: '2' },
        { id: '16', name: 'Ph∆∞·ªùng H√†ng B·ªì', district_id: '2' },
        { id: '17', name: 'Ph∆∞·ªùng C·ª≠a ƒê√¥ng', district_id: '2' },
        { id: '18', name: 'Ph∆∞·ªùng L√Ω Th√°i T·ªï', district_id: '2' },
        { id: '19', name: 'Ph∆∞·ªùng H√†ng B·∫°c', district_id: '2' },
        { id: '20', name: 'Ph∆∞·ªùng H√†ng Gai', district_id: '2' }
      ],
      '20': [ // Qu·∫≠n 1 TP.HCM
        { id: '100', name: 'Ph∆∞·ªùng T√¢n ƒê·ªãnh', district_id: '20' },
        { id: '101', name: 'Ph∆∞·ªùng ƒêa Kao', district_id: '20' },
        { id: '102', name: 'Ph∆∞·ªùng B·∫øn Ngh√©', district_id: '20' },
        { id: '103', name: 'Ph∆∞·ªùng B·∫øn Th√†nh', district_id: '20' },
        { id: '104', name: 'Ph∆∞·ªùng Nguy·ªÖn Th√°i B√¨nh', district_id: '20' },
        { id: '105', name: 'Ph∆∞·ªùng Ph·∫°m Ng≈© L√£o', district_id: '20' },
        { id: '106', name: 'Ph∆∞·ªùng C·∫ßu √îng L√£nh', district_id: '20' },
        { id: '107', name: 'Ph∆∞·ªùng C√¥ Giang', district_id: '20' },
        { id: '108', name: 'Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh', district_id: '20' },
        { id: '109', name: 'Ph∆∞·ªùng C·∫ßu Kho', district_id: '20' }
      ],
      '21': [ // Qu·∫≠n 2 TP.HCM
        { id: '110', name: 'Ph∆∞·ªùng Th·ªß Thi√™m', district_id: '21' },
        { id: '111', name: 'Ph∆∞·ªùng An Ph√∫', district_id: '21' },
        { id: '112', name: 'Ph∆∞·ªùng An Kh√°nh', district_id: '21' },
        { id: '113', name: 'Ph∆∞·ªùng B√¨nh An', district_id: '21' },
        { id: '114', name: 'Ph∆∞·ªùng B√¨nh Kh√°nh', district_id: '21' },
        { id: '115', name: 'Ph∆∞·ªùng B√¨nh Tr∆∞ng ƒê√¥ng', district_id: '21' },
        { id: '116', name: 'Ph∆∞·ªùng B√¨nh Tr∆∞ng T√¢y', district_id: '21' },
        { id: '117', name: 'Ph∆∞·ªùng C√°t L√°i', district_id: '21' },
        { id: '118', name: 'Ph∆∞·ªùng Th·∫°nh M·ªπ L·ª£i', district_id: '21' },
        { id: '119', name: 'Ph∆∞·ªùng Th·∫£o ƒêi·ªÅn', district_id: '21' }
      ],
      '40': [ // Ninh Ki·ªÅu C·∫ßn Th∆°
        { id: '200', name: 'Ph∆∞·ªùng C√°i Kh·∫ø', district_id: '40' },
        { id: '201', name: 'Ph∆∞·ªùng An H√≤a', district_id: '40' },
        { id: '202', name: 'Ph∆∞·ªùng Th·ªõi B√¨nh', district_id: '40' },
        { id: '203', name: 'Ph∆∞·ªùng An Nghi·ªáp', district_id: '40' },
        { id: '204', name: 'Ph∆∞·ªùng An C∆∞', district_id: '40' },
        { id: '205', name: 'Ph∆∞·ªùng T√¢n An', district_id: '40' },
        { id: '206', name: 'Ph∆∞·ªùng An Ph√∫', district_id: '40' },
        { id: '207', name: 'Ph∆∞·ªùng Xu√¢n Kh√°nh', district_id: '40' },
        { id: '208', name: 'Ph∆∞·ªùng H∆∞ng L·ª£i', district_id: '40' },
        { id: '209', name: 'Ph∆∞·ªùng An Kh√°nh', district_id: '40' }
      ],
      '70': [ // H·∫£i Ch√¢u ƒê√† N·∫µng
        { id: '300', name: 'Ph∆∞·ªùng Th·∫°ch Thang', district_id: '70' },
        { id: '301', name: 'Ph∆∞·ªùng H·∫£i Ch√¢u I', district_id: '70' },
        { id: '302', name: 'Ph∆∞·ªùng H·∫£i Ch√¢u II', district_id: '70' },
        { id: '303', name: 'Ph∆∞·ªùng Ph∆∞·ªõc Ninh', district_id: '70' },
        { id: '304', name: 'Ph∆∞·ªùng H√≤a Thu·∫≠n T√¢y', district_id: '70' },
        { id: '305', name: 'Ph∆∞·ªùng H√≤a Thu·∫≠n ƒê√¥ng', district_id: '70' },
        { id: '306', name: 'Ph∆∞·ªùng Nam D∆∞∆°ng', district_id: '70' },
        { id: '307', name: 'Ph∆∞·ªùng B√¨nh Hi√™n', district_id: '70' },
        { id: '308', name: 'Ph∆∞·ªùng B√¨nh Thu·∫≠n', district_id: '70' },
        { id: '309', name: 'Ph∆∞·ªùng H√≤a C∆∞·ªùng B·∫Øc', district_id: '70' },
        { id: '310', name: 'Ph∆∞·ªùng H√≤a C∆∞·ªùng Nam', district_id: '70' }
      ],
      '80': [ // H·ªìng B√†ng H·∫£i Ph√≤ng
        { id: '400', name: 'Ph∆∞·ªùng Qu√°n Toan', district_id: '80' },
        { id: '401', name: 'Ph∆∞·ªùng H√πng V∆∞∆°ng', district_id: '80' },
        { id: '402', name: 'Ph∆∞·ªùng S·ªü D·∫ßu', district_id: '80' },
        { id: '403', name: 'Ph∆∞·ªùng Th∆∞·ª£ng L√Ω', district_id: '80' },
        { id: '404', name: 'Ph∆∞·ªùng H·∫° L√Ω', district_id: '80' },
        { id: '405', name: 'Ph∆∞·ªùng Minh Khai', district_id: '80' },
        { id: '406', name: 'Ph∆∞·ªùng Tr·∫°i Cau', district_id: '80' },
        { id: '407', name: 'Ph∆∞·ªùng L√™ L·ª£i', district_id: '80' },
        { id: '408', name: 'Ph∆∞·ªùng ƒê√¥ng Kh√™', district_id: '80' },
        { id: '409', name: 'Ph∆∞·ªùng C·∫ßu ƒê·∫•t', district_id: '80' },
        { id: '410', name: 'Ph∆∞·ªùng L·∫°c Vi√™n', district_id: '80' }
      ]
    };
    
    const result = wards[districtId] || [];
    // console.log('‚úÖ Mock wards loaded:', result.length, 'wards for district', districtId);
    return result;
  }

  private getMockAddresses(query: string): GHTKAddress[] {
    // Mock search results
    const mockAddresses: GHTKAddress[] = [
      {
        id: '1',
        name: 'Nh√† ri√™ng',
        address: '123 ƒê∆∞·ªùng ABC, Ph∆∞·ªùng XYZ',
        province: 'Th√†nh ph·ªë C·∫ßn Th∆°',
        district: 'Qu·∫≠n Ninh Ki·ªÅu',
        ward: 'Ph∆∞·ªùng C√°i Kh·∫ø',
        phone: '0865031912',
        note: 'ƒê·ªãa ch·ªâ giao h√†ng ch√≠nh'
      }
    ];
    
    return mockAddresses.filter(addr => 
      addr.address.toLowerCase().includes(query.toLowerCase()) ||
      addr.province.toLowerCase().includes(query.toLowerCase()) ||
      addr.district.toLowerCase().includes(query.toLowerCase())
    );
  }
}

export const ghtkService: GHTKService = new GHTKServiceImpl();

// Types are already exported above
