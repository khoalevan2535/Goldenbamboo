import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Badge, Table, Modal, Alert, Spinner } from 'react-bootstrap';
import { Eye, XCircle, Clock, CheckCircle, Truck, CheckLg, X } from 'react-bootstrap-icons';
import { useAuth } from '../../hooks/useAuth';
import { orderApi, type Order, type OrderItem } from '../../services/orderApi';
import { toast } from 'react-toastify';
import Swal from 'sweetalert2';
import '../../style/client/OrderHistory.scss';

const OrderHistoryPage: React.FC = () => {
    const { user } = useAuth();
    const [orders, setOrders] = useState<Order[]>([]);
    const [loading, setLoading] = useState(true);
    const [showDetailsModal, setShowDetailsModal] = useState(false);
    const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
    const [cancelingOrder, setCancelingOrder] = useState<number | null>(null);

    // Function ƒë·ªÉ extract t√™n kh√°ch h√†ng t·ª´ description
    const extractCustomerName = (description: string | undefined): string | null => {
        if (!description) return null;
        const match = description.match(/Kh√°ch h√†ng:\s*(.+?)(?:\s|$)/);
        return match ? match[1].trim() : null;
    };

    useEffect(() => {
        if (user?.accountId) {
            loadUserOrders();
        }
    }, [user?.accountId]);


    const loadUserOrders = async () => {
        try {
            setLoading(true);
            console.log('Loading orders for account ID:', user!.accountId);

            const response = await orderApi.getUserOrders(user!.accountId);
            console.log('API Response:', response);

            if (response.success) {
                console.log('API returned data:', response.data);
                console.log('First order total_amount:', response.data?.[0]?.total_amount);
                console.log('First order created_at:', response.data?.[0]?.created_at);

                // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ API
                const processedOrders = response.data.map((order: any) => ({
                    ...order,
                    // ƒê·∫£m b·∫£o total_amount l√† s·ªë (backend tr·∫£ v·ªÅ totalAmount)
                    total_amount: parseFloat(order.totalAmount) || parseFloat(order.total_amount) || 0,
                    // ƒê·∫£m b·∫£o created_at c√≥ format ƒë√∫ng (backend tr·∫£ v·ªÅ createdAt)
                    created_at: order.createdAt || order.created_at || new Date().toISOString(),
                    updated_at: order.updatedAt || order.updated_at || new Date().toISOString(),
                    // ƒê·∫£m b·∫£o order_items c√≥ d·ªØ li·ªáu (backend tr·∫£ v·ªÅ items)
                    order_items: order.items || order.order_items || []
                }));

                setOrders(processedOrders);
            } else {
                console.error('API returned success=false:', response.message);
                toast.error(response.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng');
                setOrders([]);
            }
        } catch (error: any) {
            console.error('Error loading orders:', error);

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
            const errorMessage = error.response?.data?.message ||
                error.response?.data?.error ||
                error.message ||
                'C√≥ l·ªói x·∫£y ra khi t·∫£i ƒë∆°n h√†ng';

            toast.error(`L·ªói: ${errorMessage}`);
            setOrders([]);

            // Log th√™m th√¥ng tin ƒë·ªÉ debug
            console.error('Error details:', {
                status: error.response?.status,
                statusText: error.response?.statusText,
                data: error.response?.data,
                url: error.config?.url
            });

            // Kh√¥ng c√≥ d·ªØ li·ªáu khi API th·∫•t b·∫°i
            setOrders([]);
        } finally {
            setLoading(false);
        }
    };

    const handleViewDetails = (order: Order) => {
        setSelectedOrder(order);
        setShowDetailsModal(true);
    };

    const handleCancelOrder = async (orderId: number) => {
        try {
            // Ch·ªâ cho ph√©p h·ªßy ƒë∆°n h√†ng khi tr·∫°ng th√°i l√† PENDING ho·∫∑c CONFIRMED
            const order = orders.find(o => o.id === orderId);
            if (!order) return;

            if (!['PENDING', 'CONFIRMED'].includes(order.status)) {
                toast.warning('Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i n√†y');
                return;
            }

            // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
            const result = await Swal.fire({
                title: 'X√°c nh·∫≠n h·ªßy ƒë∆°n h√†ng',
                text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng ${orderId}?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'C√≥, h·ªßy ƒë∆°n h√†ng!',
                cancelButtonText: 'Kh√¥ng, gi·ªØ l·∫°i',
                reverseButtons: true
            });

            // N·∫øu ng∆∞·ªùi d√πng kh√¥ng x√°c nh·∫≠n, tho√°t kh·ªèi function
            if (!result.isConfirmed) {
                return;
            }

            setCancelingOrder(orderId);

            const response = await orderApi.updateOrderStatus(orderId, 'CANCELED');

            if (response.success) {
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                await Swal.fire({
                    title: 'ƒê√£ h·ªßy ƒë∆°n h√†ng!',
                    text: 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong state
                setOrders(prevOrders =>
                    prevOrders.map(order =>
                        order.id === orderId
                            ? { ...order, status: 'CANCELED' }
                            : order
                    )
                );
            } else {
                await Swal.fire({
                    title: 'L·ªói!',
                    text: response.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        } catch (error: any) {
            console.error('Error canceling order:', error);
            await Swal.fire({
                title: 'L·ªói!',
                text: error.message || 'C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë∆°n h√†ng',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        } finally {
            setCancelingOrder(null);
        }
    };

    const getStatusBadge = (status: string) => {
        const statusConfig = {
            'PENDING': { variant: 'warning', text: 'Ch·ªù x·ª≠ l√Ω', icon: <Clock /> },
            'CONFIRMED': { variant: 'info', text: 'ƒê√£ x√°c nh·∫≠n', icon: <CheckCircle /> },
            'PREPARING': { variant: 'primary', text: 'ƒêang chu·∫©n b·ªã', icon: <Clock /> },
            'READY': { variant: 'success', text: 'S·∫µn s√†ng', icon: <CheckLg /> },
            'DELIVERING': { variant: 'info', text: 'ƒêang giao', icon: <Truck /> },
            'COMPLETED': { variant: 'success', text: 'Ho√†n th√†nh', icon: <CheckLg /> },
            'CANCELED': { variant: 'danger', text: 'ƒê√£ h·ªßy', icon: <X /> }
        };

        const config = statusConfig[status as keyof typeof statusConfig] || {
            variant: 'secondary',
            text: status,
            icon: <Clock />
        };

        return (
            <Badge bg={config.variant} className="d-flex align-items-center gap-1">
                {config.icon}
                {config.text}
            </Badge>
        );
    };

    const formatCurrency = (amount: number | string | null | undefined) => {
        if (amount === null || amount === undefined) return '0 ‚Ç´';
        const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
        if (isNaN(numAmount) || numAmount === 0) return '0 ‚Ç´';
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(numAmount);
    };

    const formatDateTime = (dateString: string) => {
        if (!dateString) return 'Ch∆∞a c√≥ th√¥ng tin';
        try {
            // X·ª≠ l√Ω c√°c format date kh√°c nhau
            let date: Date;
            if (dateString.includes('T')) {
                // ISO format
                date = new Date(dateString);
            } else if (dateString.includes(' ')) {
                // SQL datetime format
                date = new Date(dateString.replace(' ', 'T'));
            } else {
                date = new Date(dateString);
            }

            if (isNaN(date.getTime())) return 'Ng√†y kh√¥ng h·ª£p l·ªá';

            return date.toLocaleString('vi-VN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        } catch (error) {
            console.error('Error formatting date:', dateString, error);
            return 'Ng√†y kh√¥ng h·ª£p l·ªá';
        }
    };

    const canCancelOrder = (status: string) => {
        return ['PENDING', 'CONFIRMED'].includes(status);
    };


    if (!user) {
        return (
            <Container className="mt-4">
                <Alert variant="warning">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n h√†ng c·ªßa b·∫°n.</Alert>
            </Container>
        );
    }

    return (
        <Container className="mt-4">
            <Row className="mb-4">
                <Col>
                    <Card>
                        <Card.Body>
                            <h4 className="mb-0">
                                üìã L·ªãch s·ª≠ ƒë∆°n h√†ng
                            </h4>
                            <small className="text-muted">
                                Xem t·∫•t c·∫£ ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t c·ªßa b·∫°n
                            </small>
                        </Card.Body>
                    </Card>
                </Col>
            </Row>

            <Row>
                <Col>
                    <Card>
                        <Card.Body>
                            {loading ? (
                                <div className="text-center py-4">
                                    <Spinner animation="border" variant="primary" />
                                    <p className="mt-2">ƒêang t·∫£i ƒë∆°n h√†ng...</p>
                                </div>
                            ) : orders.length === 0 ? (
                                <div className="text-center py-4">
                                    <Clock size={48} className="text-muted mb-3" />
                                    <h5>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</h5>
                                    <p className="text-muted">H√£y ƒë·∫∑t m√≥n ƒÉn ƒë·ªÉ b·∫Øt ƒë·∫ßu!</p>
                                </div>
                            ) : (
                                <Table responsive hover>
                                    <thead>
                                        <tr>
                                            <th>M√£ ƒë∆°n h√†ng</th>
                                            <th>Tr·∫°ng th√°i</th>
                                            <th>T·ªïng ti·ªÅn</th>
                                            <th>Th·ªùi gian ƒë·∫∑t</th>
                                            <th>Thao t√°c</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {orders.map((order) => (
                                            <tr key={order.id}>
                                                <td>
                                                    <strong>{order.order_code || order.id}</strong>
                                                </td>
                                                <td>{getStatusBadge(order.status)}</td>
                                                <td>
                                                    <div className="fw-bold text-primary">
                                                        {formatCurrency(order.total_amount)}
                                                    </div>
                                                </td>
                                                <td>
                                                    <small>{formatDateTime(order.created_at)}</small>
                                                </td>
                                                <td>
                                                    <div className="btn-group btn-group-sm">
                                                        <Button
                                                            variant="outline-info"
                                                            size="sm"
                                                            onClick={() => handleViewDetails(order)}
                                                            title="Xem chi ti·∫øt"
                                                        >
                                                            <Eye />
                                                        </Button>

                                                        {canCancelOrder(order.status) && (
                                                            <Button
                                                                variant="outline-danger"
                                                                size="sm"
                                                                onClick={() => handleCancelOrder(order.id)}
                                                                title="H·ªßy ƒë∆°n h√†ng"
                                                                disabled={cancelingOrder === order.id}
                                                            >
                                                                {cancelingOrder === order.id ? (
                                                                    <Spinner animation="border" size="sm" />
                                                                ) : (
                                                                    <XCircle />
                                                                )}
                                                            </Button>
                                                        )}
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </Table>
                            )}
                        </Card.Body>
                    </Card>
                </Col>
            </Row>

            {/* Order Details Modal */}
            <Modal
                show={showDetailsModal}
                onHide={() => setShowDetailsModal(false)}
                size="lg"
            >
                <Modal.Header closeButton>
                    <Modal.Title>Chi ti·∫øt ƒë∆°n h√†ng {selectedOrder?.order_code || selectedOrder?.id}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {selectedOrder && (
                        <div>
                            <Row className="mb-3">
                                <Col md={6}>
                                    <h6>Th√¥ng tin ƒë∆°n h√†ng</h6>
                                    <p><strong>M√£ ƒë∆°n h√†ng:</strong> {selectedOrder.id}</p>
                                    <p><strong>Tr·∫°ng th√°i:</strong> {getStatusBadge(selectedOrder.status)}</p>
                                    <p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> {selectedOrder.payment_method}</p>
                                    <p><strong>Ghi ch√∫:</strong> {selectedOrder.note || 'Kh√¥ng c√≥'}</p>
                                </Col>
                                <Col md={6}>
                                    <h6>Th√¥ng tin kh√°ch h√†ng</h6>
                                    <p><strong>H·ªç t√™n:</strong> {extractCustomerName(selectedOrder.description) || selectedOrder.customer_name || 'Kh√°ch h√†ng'}</p>
                                    <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {selectedOrder.customer_phone || 'N/A'}</p>
                                    <p><strong>ƒê·ªãa ch·ªâ:</strong> {selectedOrder.customer_address || 'N/A'}</p>
                                </Col>
                            </Row>

                            <Row className="mb-3">
                                <Col>
                                    <h6>Th√¥ng tin thanh to√°n</h6>
                                    <p><strong>T·ªïng ti·ªÅn:</strong> {formatCurrency(selectedOrder.total_amount)}</p>
                                    <p><strong>ƒê√£ thanh to√°n tr∆∞·ªõc:</strong> {formatCurrency(selectedOrder.prepay)}</p>
                                </Col>
                            </Row>

                            <h6>Danh s√°ch m√≥n ƒÉn</h6>
                            <div className="order-items-summary">
                                {selectedOrder.order_items && selectedOrder.order_items.length > 0 ? (
                                    selectedOrder.order_items.map((item, index) => (
                                        <div key={item.id || index} className="order-item-summary mb-3">
                                            <div className="d-flex align-items-center">
                                                {/* H√¨nh ·∫£nh m√≥n ƒÉn */}
                                                <div className="item-image me-3">
                                                    <img
                                                        src={item.dish_image || '/images/default-dish.svg'}
                                                        alt={item.name || item.dish_name || 'M√≥n ƒÉn'}
                                                        className="rounded"
                                                        style={{
                                                            width: '60px',
                                                            height: '60px',
                                                            objectFit: 'cover',
                                                            backgroundColor: '#f8f9fa',
                                                            border: '1px solid #e9ecef'
                                                        }}
                                                        onError={(e) => {
                                                            e.currentTarget.src = '/images/default-dish.svg';
                                                        }}
                                                    />
                                                </div>

                                                {/* Th√¥ng tin m√≥n ƒÉn */}
                                                <div className="flex-grow-1">
                                                    <h6 className="mb-1 fw-bold">{item.name || item.dish_name || 'M√≥n ƒÉn'}</h6>
                                                    <small className="text-muted d-block">M√≥n l·∫ª</small>
                                                </div>

                                                {/* S·ªë l∆∞·ª£ng */}
                                                <div className="quantity-section me-3 text-center">
                                                    <span className="badge bg-light text-dark px-2 py-1">
                                                        x{item.quantity}
                                                    </span>
                                                </div>

                                                {/* Gi√° */}
                                                <div className="price-section text-end">
                                                    <div className="unit-price text-warning fw-bold mb-1">
                                                        {formatCurrency(item.unit_price || 0)}
                                                    </div>
                                                    <div className="total-price fw-bold text-primary">
                                                        {formatCurrency(item.final_price || item.total_price || (item.unit_price * item.quantity) || 0)}
                                                    </div>
                                                </div>
                                            </div>

                                            {/* ƒê∆∞·ªùng ph√¢n c√°ch */}
                                            {index < selectedOrder.order_items.length - 1 && (
                                                <hr className="my-2" style={{ borderColor: '#e9ecef' }} />
                                            )}
                                        </div>
                                    ))
                                ) : (
                                    <div className="text-muted text-center py-4">
                                        <i className="fas fa-utensils me-2"></i>
                                        Kh√¥ng c√≥ m√≥n ƒÉn n√†o
                                    </div>
                                )}
                            </div>

                            <div className="mt-3">
                                <small className="text-muted">
                                    <strong>Th·ªùi gian ƒë·∫∑t:</strong> {formatDateTime(selectedOrder.created_at)}
                                </small>
                                {selectedOrder.updated_at !== selectedOrder.created_at && (
                                    <small className="text-muted ms-3">
                                        <strong>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</strong> {formatDateTime(selectedOrder.updated_at)}
                                    </small>
                                )}
                            </div>
                        </div>
                    )}
                </Modal.Body>
            </Modal>
        </Container>
    );
};

export default OrderHistoryPage;
