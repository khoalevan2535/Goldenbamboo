package com.poly.restaurant.services;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.poly.restaurant.dtos.DiscountRequestDTO;
import com.poly.restaurant.dtos.DiscountResponseDTO;
import com.poly.restaurant.entities.DiscountEntity;
import com.poly.restaurant.exceptions.ResourceNotFoundException;
import com.poly.restaurant.mappers.DiscountMapper;
import com.poly.restaurant.repositories.DiscountRepository;
import com.poly.restaurant.repositories.DishRepository;
import com.poly.restaurant.repositories.ComboRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class DiscountService {

	private static final Logger logger = LoggerFactory.getLogger(DiscountService.class);
	private final DiscountRepository discountRepository;
	private final DishRepository dishRepository;
	private final ComboRepository comboRepository;

	@Transactional
	public DiscountResponseDTO createDiscount(DiscountRequestDTO request) {
		logger.info("[CREATE DISCOUNT] code: {} | name: {} | newPrice: {} | dishId: {} | comboId: {}", 
			request.getCode(), request.getName(), request.getNewPrice(), request.getDishId(), request.getComboId());

		// Validate dates
		if (request.getEndDate().isBefore(request.getStartDate())) {
			throw new IllegalArgumentException("Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu");
		}

		// Validate based on discount type
		if (request.getType() == null) {
			// Auto-detect type based on existing logic
			if (request.getDishId() != null || request.getComboId() != null) {
				request.setType(com.poly.restaurant.entities.enums.DiscountType.BRANCH_DISCOUNT);
			} else {
				request.setType(com.poly.restaurant.entities.enums.DiscountType.CUSTOMER_VOUCHER);
			}
		}
		
		// Validate code based on type
		if (request.getType() == com.poly.restaurant.entities.enums.DiscountType.CUSTOMER_VOUCHER) {
			// Voucher kh√°ch h√†ng - code b·∫Øt bu·ªôc
			if (request.getCode() == null || request.getCode().trim().isEmpty()) {
				throw new IllegalArgumentException("M√£ voucher l√† b·∫Øt bu·ªôc cho voucher kh√°ch h√†ng");
			}
		} else if (request.getType() == com.poly.restaurant.entities.enums.DiscountType.BRANCH_DISCOUNT) {
			// Discount chi nh√°nh - code ph·∫£i null
			request.setCode(null);
		}

		DiscountEntity discount = new DiscountEntity();
		discount.setCode(request.getCode());
		discount.setName(request.getName());
		discount.setNewPrice(request.getNewPrice());
		discount.setStartDate(request.getStartDate());
		discount.setEndDate(request.getEndDate());
		discount.setDescription(request.getDescription());
		
		// Set target items and type
		logger.info("üîç Setting dishId: {} and comboId: {} and type: {}", request.getDishId(), request.getComboId(), request.getType());
		
		// Ch·ªâ set dishId/comboId cho BRANCH_DISCOUNT, CUSTOMER_VOUCHER kh√¥ng c·∫ßn
		if (request.getType() == com.poly.restaurant.entities.enums.DiscountType.BRANCH_DISCOUNT) {
			discount.setDishId(request.getDishId());
			discount.setComboId(request.getComboId());
		} else {
			// CUSTOMER_VOUCHER kh√¥ng c·∫ßn dishId/comboId c·ª• th·ªÉ
			discount.setDishId(null);
			discount.setComboId(null);
		}
		
		discount.setType(request.getType());
		logger.info("üîç After setting - discount.dishId: {} and discount.comboId: {} and discount.type: {}", discount.getDishId(), discount.getComboId(), discount.getType());

		// Set initial status based on current time
		LocalDateTime now = LocalDateTime.now();
		if (request.getStartDate().isAfter(now)) {
			discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.SCHEDULED);
		} else if (request.getEndDate().isAfter(now)) {
			discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE);
		} else {
			discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED);
		}

		// Kh√¥ng c·∫ßn x·ª≠ l√Ω branch n·ªØa v√¨ ƒë√£ b·ªè quan h·ªá

		DiscountEntity savedDiscount = discountRepository.save(discount);

		// T·ª± ƒë·ªông c·∫≠p nh·∫≠t discount_id cho dish/combo n·∫øu discount ƒëang ACTIVE v√† l√† BRANCH_DISCOUNT
		if (savedDiscount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE && 
			savedDiscount.getType() == com.poly.restaurant.entities.enums.DiscountType.BRANCH_DISCOUNT) {
			applyActiveDiscountToItems(savedDiscount);
		}

		return DiscountMapper.toResponseDto(discountRepository.findById(savedDiscount.getId()).get());
	}

	@Transactional(readOnly = true)
	public List<DiscountResponseDTO> getAllDiscounts() {
		logger.info("üîÑ Getting all discounts from database");
		try {
			List<DiscountEntity> entities = discountRepository.findAll();
			logger.info("üìä Found {} discount entities in database", entities.size());
			
			List<DiscountResponseDTO> result = entities.stream()
				.map(entity -> {
					try {
						logger.info("üîÑ Mapping entity ID: {} - Name: {}", entity.getId(), entity.getName());
						return DiscountMapper.toResponseDto(entity);
					} catch (Exception e) {
						logger.error("‚ùå Error mapping entity ID {}: {}", entity.getId(), e.getMessage());
						return null;
					}
				})
				.filter(dto -> dto != null)
				.collect(Collectors.toList());
			
			logger.info("‚úÖ Successfully mapped {} discount DTOs", result.size());
			return result;
		} catch (Exception e) {
			logger.error("‚ùå Error getting all discounts: {}", e.getMessage(), e);
			throw e;
		}
	}

	@Transactional(readOnly = true)
	public List<DiscountResponseDTO> getActiveDiscounts() {
		logger.info("üîÑ Getting active discounts");
		try {
			// L·∫•y t·∫•t c·∫£ discounts ƒëang ho·∫°t ƒë·ªông
			List<DiscountEntity> entities = discountRepository.findAll();
			logger.info("üìä Found {} discount entities", entities.size());
			
			List<DiscountResponseDTO> result = entities.stream()
				.map(entity -> {
					try {
						logger.info("üîÑ Mapping entity ID: {} - Name: {}", 
							entity.getId(), entity.getName());
						return DiscountMapper.toResponseDto(entity);
					} catch (Exception e) {
						logger.error("‚ùå Error mapping entity ID {}: {}", entity.getId(), e.getMessage());
						return null;
					}
				})
				.filter(dto -> dto != null)
				.collect(Collectors.toList());
			
			logger.info("‚úÖ Successfully mapped {} discount DTOs", result.size());
			return result;
		} catch (Exception e) {
			logger.error("‚ùå Error getting active discounts: {}", e.getMessage(), e);
			throw e;
		}
	}

	public DiscountResponseDTO getDiscountById(Long id) {
		try {
		// L·∫•y discount
		Optional<DiscountEntity> entityWithBranches = discountRepository.findById(id);
			if (!entityWithBranches.isPresent()) {
				throw new ResourceNotFoundException("Discount not found with id: " + id);
			}

			DiscountEntity entity = entityWithBranches.get();



			return DiscountMapper.toResponseDto(entity);
		} catch (Exception e) {
			logger.error("Error getting discount by id {}: {}", id, e.getMessage());
			throw new RuntimeException("Failed to get discount", e);
		}
	}

	@Transactional
	public DiscountResponseDTO updateDiscount(Long id, DiscountRequestDTO request) {
		DiscountEntity discount = discountRepository.findById(id)
				.orElseThrow(() -> new RuntimeException("Discount not found"));

		// Validate dates - cho ph√©p endDate tr∆∞·ªõc startDate trong tr∆∞·ªùng h·ª£p d·ª´ng discount
		// Ch·ªâ validate n·∫øu c·∫£ startDate v√† endDate ƒë·ªÅu ·ªü t∆∞∆°ng lai (t·∫°o discount m·ªõi)
		LocalDateTime now = LocalDateTime.now();
		if (request.getStartDate().isAfter(now) && request.getEndDate().isBefore(request.getStartDate())) {
			throw new IllegalArgumentException("Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu");
		}

		discount.setName(request.getName());
		discount.setNewPrice(request.getNewPrice());
		discount.setStartDate(request.getStartDate());
		discount.setEndDate(request.getEndDate());
		discount.setDescription(request.getDescription());
		
		// Update target items - ch·ªâ cho BRANCH_DISCOUNT
		if (request.getType() == com.poly.restaurant.entities.enums.DiscountType.BRANCH_DISCOUNT) {
			discount.setDishId(request.getDishId());
			discount.setComboId(request.getComboId());
		} else {
			// CUSTOMER_VOUCHER kh√¥ng c·∫ßn dishId/comboId c·ª• th·ªÉ
			discount.setDishId(null);
			discount.setComboId(null);
		}

		// Update status based on current time
		if (request.getStartDate().isAfter(now)) {
			discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.SCHEDULED);
		} else if (request.getEndDate().isAfter(now)) {
			discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE);
		} else {
			discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED);
		}

		// C√≥ th·ªÉ c·∫≠p nh·∫≠t branch, dish, combo n·∫øu c·∫ßn
		DiscountEntity saved = discountRepository.save(discount);
		
		// T·ª± ƒë·ªông c·∫≠p nh·∫≠t discount_id cho dish/combo n·∫øu discount ƒëang ACTIVE
		if (saved.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE) {
			applyActiveDiscountToItems(saved);
		}
		
		return DiscountMapper.toResponseDto(saved);
	}

	@Transactional
	public void deleteDiscount(Long id) {
		if (!discountRepository.existsById(id)) {
			throw new ResourceNotFoundException("Discount not found");
		}
		discountRepository.deleteById(id);
	}


	// Method ƒë·ªÉ ƒë·ªìng b·ªô t·∫•t c·∫£ discount_id trong b·∫£ng dishes/combos
	@Transactional
	public void syncAllDiscountIds() {
		logger.info("üîÑ Starting sync of all discount_ids...");
		
		// L·∫•y t·∫•t c·∫£ discount ƒëang ho·∫°t ƒë·ªông
		List<DiscountEntity> allDiscounts = discountRepository.findAll();
		List<DiscountEntity> activeDiscounts = allDiscounts.stream()
			.filter(discount -> discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE ||
								discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.SCHEDULED ||
								discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.EXPIRING)
			.collect(Collectors.toList());
		
		// L·∫•y t·∫•t c·∫£ dishes v√† combos
		List<com.poly.restaurant.entities.DishEntity> allDishes = dishRepository.findAll();
		List<com.poly.restaurant.entities.ComboEntity> allCombos = comboRepository.findAll();
		
		// C·∫≠p nh·∫≠t discount_id cho dishes d·ª±a tr√™n logic nghi·ªáp v·ª•
		for (com.poly.restaurant.entities.DishEntity dish : allDishes) {
			// T√¨m discount ph√π h·ª£p nh·∫•t cho dish n√†y
			Optional<DiscountEntity> bestDiscount = activeDiscounts.stream()
				.filter(discount -> isDiscountApplicableToDish(discount, dish))
				.sorted((d1, d2) -> {
					// ∆Øu ti√™n discount m·ªõi nh·∫•t
					return d2.getCreatedAt().compareTo(d1.getCreatedAt());
				})
				.findFirst();
			
			if (bestDiscount.isPresent()) {
				DiscountEntity discount = bestDiscount.get();
				if (dish.getDiscount() == null || !dish.getDiscount().getId().equals(discount.getId())) {
					dish.setDiscount(discount);
					dishRepository.save(dish);
					logger.info("‚úÖ Synced discount_id {} to dish {}", discount.getId(), dish.getId());
				}
			} else {
				// Kh√¥ng c√≥ discount ph√π h·ª£p, x√≥a discount_id c≈©
				if (dish.getDiscount() != null) {
					dish.setDiscount(null);
					dishRepository.save(dish);
					logger.info("‚úÖ Removed discount_id from dish {}", dish.getId());
				}
			}
		}
		
		// C·∫≠p nh·∫≠t discount_id cho combos d·ª±a tr√™n logic nghi·ªáp v·ª•
		for (com.poly.restaurant.entities.ComboEntity combo : allCombos) {
			// T√¨m discount ph√π h·ª£p nh·∫•t cho combo n√†y
			Optional<DiscountEntity> bestDiscount = activeDiscounts.stream()
				.filter(discount -> isDiscountApplicableToCombo(discount, combo))
				.sorted((d1, d2) -> {
					// ∆Øu ti√™n discount m·ªõi nh·∫•t
					return d2.getCreatedAt().compareTo(d1.getCreatedAt());
				})
				.findFirst();
			
			if (bestDiscount.isPresent()) {
				DiscountEntity discount = bestDiscount.get();
				if (combo.getDiscount() == null || !combo.getDiscount().getId().equals(discount.getId())) {
					combo.setDiscount(discount);
					comboRepository.save(combo);
					logger.info("‚úÖ Synced discount_id {} to combo {}", discount.getId(), combo.getId());
				}
			} else {
				// Kh√¥ng c√≥ discount ph√π h·ª£p, x√≥a discount_id c≈©
				if (combo.getDiscount() != null) {
					combo.setDiscount(null);
					comboRepository.save(combo);
					logger.info("‚úÖ Removed discount_id from combo {}", combo.getId());
				}
			}
		}
		
		logger.info("‚úÖ Completed sync of all discount_ids");
	}

	// Method ri√™ng ƒë·ªÉ ƒë·ªìng b·ªô discount_id cho combos
	@Transactional
	public void syncComboDiscountIds() {
		logger.info("üîÑ Starting sync of combo discount_ids...");
		
		// L·∫•y t·∫•t c·∫£ discount ƒëang ho·∫°t ƒë·ªông
		List<DiscountEntity> allDiscounts = discountRepository.findAll();
		List<DiscountEntity> activeDiscounts = allDiscounts.stream()
			.filter(discount -> discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE ||
								discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.SCHEDULED ||
								discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.EXPIRING)
			.collect(Collectors.toList());
		
		// L·∫•y t·∫•t c·∫£ combos
		List<com.poly.restaurant.entities.ComboEntity> allCombos = comboRepository.findAll();
		
		// C·∫≠p nh·∫≠t discount_id cho combos d·ª±a tr√™n logic nghi·ªáp v·ª•
		for (com.poly.restaurant.entities.ComboEntity combo : allCombos) {
			// T√¨m discount ph√π h·ª£p nh·∫•t cho combo n√†y
			Optional<DiscountEntity> bestDiscount = activeDiscounts.stream()
				.filter(discount -> isDiscountApplicableToCombo(discount, combo))
				.sorted((d1, d2) -> {
					// ∆Øu ti√™n discount m·ªõi nh·∫•t
					return d2.getCreatedAt().compareTo(d1.getCreatedAt());
				})
				.findFirst();
			
			if (bestDiscount.isPresent()) {
				DiscountEntity discount = bestDiscount.get();
				if (combo.getDiscount() == null || !combo.getDiscount().getId().equals(discount.getId())) {
					combo.setDiscount(discount);
					comboRepository.save(combo);
					logger.info("‚úÖ Synced discount_id {} to combo {}", discount.getId(), combo.getId());
				}
			} else {
				// Kh√¥ng c√≥ discount ph√π h·ª£p, x√≥a discount_id c≈©
				if (combo.getDiscount() != null) {
					combo.setDiscount(null);
					comboRepository.save(combo);
					logger.info("‚úÖ Removed discount_id from combo {}", combo.getId());
				}
			}
		}
		
		logger.info("‚úÖ Completed sync of combo discount_ids");
	}

	// Method ƒë·ªÉ t·ª± ƒë·ªông √°p d·ª•ng discount ACTIVE cho items ph√π h·ª£p
	private void applyActiveDiscountToItems(DiscountEntity discount) {
		try {
			logger.info("üéØ Auto-applying ACTIVE discount {} to matching items...", discount.getId());
			
			int appliedDishes = 0;
			int appliedCombos = 0;
			
			// N·∫øu discount c√≥ dishId c·ª• th·ªÉ
			if (discount.getDishId() != null) {
				com.poly.restaurant.entities.DishEntity dish = dishRepository.findById(discount.getDishId()).orElse(null);
				if (dish != null) {
					// X·ª≠ l√Ω logic thay th·∫ø discount c≈©
					if (dish.getDiscount() != null) {
						handleOldDiscountReplacement(discount, dish.getDiscount(), "dish", dish.getId());
					}
					
					dish.setDiscount(discount);
					dishRepository.save(dish);
					appliedDishes++;
					logger.info("‚úÖ Auto-applied discount {} to specific dish {} ({})", 
						discount.getId(), dish.getId(), dish.getName());
				}
			}
			
			// N·∫øu discount c√≥ comboId c·ª• th·ªÉ
			if (discount.getComboId() != null) {
				com.poly.restaurant.entities.ComboEntity combo = comboRepository.findById(discount.getComboId()).orElse(null);
				if (combo != null) {
					// X·ª≠ l√Ω logic thay th·∫ø discount c≈©
					if (combo.getDiscount() != null) {
						handleOldDiscountReplacement(discount, combo.getDiscount(), "combo", combo.getId());
					}
					
					combo.setDiscount(discount);
					comboRepository.save(combo);
					appliedCombos++;
					logger.info("‚úÖ Auto-applied discount {} to specific combo {} ({})", 
						discount.getId(), combo.getId(), combo.getName());
				}
			}
			
			// N·∫øu discount kh√¥ng c√≥ target c·ª• th·ªÉ, √°p d·ª•ng theo logic matching
			if (discount.getDishId() == null && discount.getComboId() == null) {
				// T√¨m t·∫•t c·∫£ dishes ph√π h·ª£p v·ªõi discount n√†y
				List<com.poly.restaurant.entities.DishEntity> matchingDishes = dishRepository.findAll().stream()
					.filter(dish -> isDiscountApplicableToDish(discount, dish))
					.collect(Collectors.toList());
				
				// T√¨m t·∫•t c·∫£ combos ph√π h·ª£p v·ªõi discount n√†y
				List<com.poly.restaurant.entities.ComboEntity> matchingCombos = comboRepository.findAll().stream()
					.filter(combo -> isDiscountApplicableToCombo(discount, combo))
					.collect(Collectors.toList());
				
				// √Åp d·ª•ng discount cho dishes
				for (com.poly.restaurant.entities.DishEntity dish : matchingDishes) {
					// Ch·ªâ √°p d·ª•ng n·∫øu dish ch∆∞a c√≥ discount ho·∫∑c discount c≈© ƒë√£ h·∫øt h·∫°n
					if (dish.getDiscount() == null || 
						dish.getDiscount().getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED ||
						dish.getDiscount().getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.REPLACED) {
						
						dish.setDiscount(discount);
						dishRepository.save(dish);
						appliedDishes++;
						logger.info("‚úÖ Auto-applied discount {} to dish {} ({})", 
							discount.getId(), dish.getId(), dish.getName());
					}
				}
				
				// √Åp d·ª•ng discount cho combos
				for (com.poly.restaurant.entities.ComboEntity combo : matchingCombos) {
					// Ch·ªâ √°p d·ª•ng n·∫øu combo ch∆∞a c√≥ discount ho·∫∑c discount c≈© ƒë√£ h·∫øt h·∫°n
					if (combo.getDiscount() == null || 
						combo.getDiscount().getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED ||
						combo.getDiscount().getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.REPLACED) {
						
						combo.setDiscount(discount);
						comboRepository.save(combo);
						appliedCombos++;
						logger.info("‚úÖ Auto-applied discount {} to combo {} ({})", 
							discount.getId(), combo.getId(), combo.getName());
					}
				}
			}
			
			logger.info("üéØ Auto-applied discount {} to {} dishes and {} combos", 
				discount.getId(), appliedDishes, appliedCombos);
				
		} catch (Exception e) {
			logger.error("‚ùå Error auto-applying discount {} to items: {}", discount.getId(), e.getMessage());
		}
	}
	
	// Helper method ƒë·ªÉ ki·ªÉm tra discount c√≥ √°p d·ª•ng ƒë∆∞·ª£c cho dish kh√¥ng
	private boolean isDiscountApplicableToDish(DiscountEntity discount, com.poly.restaurant.entities.DishEntity dish) {
		// Logic ki·ªÉm tra: discount c√≥ th·ªÉ √°p d·ª•ng cho dish n√†y kh√¥ng
		// 1. Ki·ªÉm tra t√™n discount c√≥ ch·ª©a t√™n dish kh√¥ng (logic nghi·ªáp v·ª•)
		if (discount.getName() != null && dish.getName() != null) {
			String discountName = discount.getName().toLowerCase();
			String dishName = dish.getName().toLowerCase();
			
			// N·∫øu discount name ch·ª©a dish name
			if (discountName.contains(dishName)) {
				return true;
			}
		}
		
		// 2. M·∫∑c ƒë·ªãnh: t·∫•t c·∫£ discount ƒë·ªÅu c√≥ th·ªÉ √°p d·ª•ng cho dish
		return true;
	}
	
	// Helper method ƒë·ªÉ ki·ªÉm tra discount c√≥ √°p d·ª•ng ƒë∆∞·ª£c cho combo kh√¥ng
	private boolean isDiscountApplicableToCombo(DiscountEntity discount, com.poly.restaurant.entities.ComboEntity combo) {
		// Logic ki·ªÉm tra: discount c√≥ th·ªÉ √°p d·ª•ng cho combo n√†y kh√¥ng
		if (discount.getName() != null && combo.getName() != null) {
			String discountName = discount.getName().toLowerCase();
			String comboName = combo.getName().toLowerCase();
			
			// 1. N·∫øu discount name ch·ª©a combo name (ch√≠nh x√°c)
			if (discountName.contains(comboName)) {
				return true;
			}
			
			// 2. N·∫øu discount name ch·ª©a "combo" v√† combo name ch·ª©a "combo"
			if (discountName.contains("combo") && comboName.contains("combo")) {
				return true;
			}
			
			// 3. Ki·ªÉm tra t·ª´ kh√≥a chung
			if (discountName.contains("combo") && 
				(comboName.contains("h·∫£i s·∫£n") || comboName.contains("ph·ªü") || 
				 comboName.contains("c∆°m") || comboName.contains("b√∫n"))) {
				return true;
			}
		}
		
		// 4. M·∫∑c ƒë·ªãnh: t·∫•t c·∫£ discount ƒë·ªÅu c√≥ th·ªÉ √°p d·ª•ng cho combo
		return true;
	}

	// Method to update status of all discounts (can be called by a scheduled task)
	@Transactional
	public void updateDiscountStatuses() {
		LocalDateTime now = LocalDateTime.now();
		List<DiscountEntity> allDiscounts = discountRepository.findAll();

		for (DiscountEntity discount : allDiscounts) {
			// Kh√¥ng thay ƒë·ªïi status c·ªßa discount ƒë√£ b·ªã REPLACED
			if (discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.REPLACED) {
				logger.debug("Skipping REPLACED discount ID: {}", discount.getId());
				continue;
			}

			com.poly.restaurant.entities.enums.DiscountStatus newStatus;

			if (discount.getStartDate().isAfter(now)) {
				// Ch∆∞a b·∫Øt ƒë·∫ßu
				newStatus = com.poly.restaurant.entities.enums.DiscountStatus.SCHEDULED;
			} else if (discount.getEndDate().isAfter(now)) {
				// ƒêang ho·∫°t ƒë·ªông - ki·ªÉm tra c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng
				LocalDateTime twentyFourHoursFromNow = now.plusHours(24);
				if (discount.getEndDate().isBefore(twentyFourHoursFromNow)) {
					// S·∫Øp h·∫øt h·∫°n (c√≤n < 24h)
					newStatus = com.poly.restaurant.entities.enums.DiscountStatus.EXPIRING;
				} else {
					// ƒêang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
					newStatus = com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE;
				}
			} else {
				// ƒê√£ h·∫øt h·∫°n
				newStatus = com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED;
			}

			if (discount.getStatus() != newStatus) {
				logger.info("üîÑ Updating discount ID {} status from {} to {}", 
					discount.getId(), discount.getStatus(), newStatus);
				discount.setStatus(newStatus);
				discountRepository.save(discount);
				
				// ƒê·ªìng b·ªô discount_id trong b·∫£ng dishes/combos
				syncDiscountIdForItems(discount, newStatus);
				
				// N·∫øu discount chuy·ªÉn sang ACTIVE v√† l√† BRANCH_DISCOUNT, t·ª± ƒë·ªông √°p d·ª•ng cho items ph√π h·ª£p
				if (newStatus == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE && 
					discount.getType() == com.poly.restaurant.entities.enums.DiscountType.BRANCH_DISCOUNT) {
					applyActiveDiscountToItems(discount);
				}
			}
		}
	}

	// Apply discount to dish or combo
	@Transactional
	public void applyDiscount(Long discountId, Long dishId, Long comboId) {
		logger.info("Applying discount {} to dish {} or combo {}", discountId, dishId, comboId);
		
		// Get discount
		DiscountEntity discount = discountRepository.findById(discountId)
			.orElseThrow(() -> new RuntimeException("Discount not found with id: " + discountId));
		
		if (dishId != null) {
			// Apply to dish
			com.poly.restaurant.entities.DishEntity dish = dishRepository.findById(dishId)
				.orElseThrow(() -> new RuntimeException("Dish not found with id: " + dishId));
			
			// X·ª≠ l√Ω logic thay th·∫ø discount c≈©
			if (dish.getDiscount() != null) {
				handleOldDiscountReplacement(discount, dish.getDiscount(), "dish", dishId);
			}
			
			dish.setDiscount(discount);
			dishRepository.save(dish);
			logger.info("‚úÖ Applied new discount {} to dish {}", discountId, dishId);
			
			// N·∫øu discount ƒëang ACTIVE, t·ª± ƒë·ªông √°p d·ª•ng cho c√°c items kh√°c ph√π h·ª£p
			if (discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE) {
				applyActiveDiscountToItems(discount);
			}
		}
		
		if (comboId != null) {
			// Apply to combo
			com.poly.restaurant.entities.ComboEntity combo = comboRepository.findById(comboId)
				.orElseThrow(() -> new RuntimeException("Combo not found with id: " + comboId));
			
			// X·ª≠ l√Ω logic thay th·∫ø discount c≈©
			if (combo.getDiscount() != null) {
				handleOldDiscountReplacement(discount, combo.getDiscount(), "combo", comboId);
			}
			
			combo.setDiscount(discount);
			comboRepository.save(combo);
			logger.info("‚úÖ Applied new discount {} to combo {}", discountId, comboId);
			
			// N·∫øu discount ƒëang ACTIVE, t·ª± ƒë·ªông √°p d·ª•ng cho c√°c items kh√°c ph√π h·ª£p
			if (discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE) {
				applyActiveDiscountToItems(discount);
			}
		}
	}

	// Method ƒë·ªÉ ƒë·ªìng b·ªô discount_id trong b·∫£ng dishes/combos
	private void syncDiscountIdForItems(DiscountEntity discount, com.poly.restaurant.entities.enums.DiscountStatus newStatus) {
		try {
			// T√¨m t·∫•t c·∫£ dishes v√† combos ƒëang s·ª≠ d·ª•ng discount n√†y
			List<com.poly.restaurant.entities.DishEntity> dishesWithThisDiscount = dishRepository.findAll().stream()
				.filter(dish -> dish.getDiscount() != null && dish.getDiscount().getId().equals(discount.getId()))
				.collect(Collectors.toList());
			
			List<com.poly.restaurant.entities.ComboEntity> combosWithThisDiscount = comboRepository.findAll().stream()
				.filter(combo -> combo.getDiscount() != null && combo.getDiscount().getId().equals(discount.getId()))
				.collect(Collectors.toList());
			
			// X·ª≠ l√Ω dishes
			for (com.poly.restaurant.entities.DishEntity dish : dishesWithThisDiscount) {
				if (newStatus == com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED || 
					newStatus == com.poly.restaurant.entities.enums.DiscountStatus.REPLACED) {
					// X√≥a discount_id n·∫øu discount ƒë√£ h·∫øt h·∫°n ho·∫∑c b·ªã thay th·∫ø
					dish.setDiscount(null);
					dishRepository.save(dish);
					logger.info("‚úÖ Removed discount_id {} from dish {}", discount.getId(), dish.getId());
				}
			}
			
			// X·ª≠ l√Ω combos
			for (com.poly.restaurant.entities.ComboEntity combo : combosWithThisDiscount) {
				if (newStatus == com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED || 
					newStatus == com.poly.restaurant.entities.enums.DiscountStatus.REPLACED) {
					// X√≥a discount_id n·∫øu discount ƒë√£ h·∫øt h·∫°n ho·∫∑c b·ªã thay th·∫ø
					combo.setDiscount(null);
					comboRepository.save(combo);
					logger.info("‚úÖ Removed discount_id {} from combo {}", discount.getId(), combo.getId());
				}
			}
		} catch (Exception e) {
			logger.error("‚ùå Error syncing discount_id for discount {}: {}", discount.getId(), e.getMessage());
		}
	}

	// Method ƒë·ªÉ x·ª≠ l√Ω logic thay th·∫ø discount c≈©
	private void handleOldDiscountReplacement(DiscountEntity newDiscount, DiscountEntity oldDiscount, String itemType, Long itemId) {
		LocalDateTime now = LocalDateTime.now();
		
		// Ch·ªâ x·ª≠ l√Ω n·∫øu discount c≈© ƒëang ACTIVE
		if (oldDiscount.getStatus() != com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE) {
			logger.info("‚ÑπÔ∏è Discount c≈© {} cho {} {} kh√¥ng c·∫ßn thay ƒë·ªïi (status: {})", 
				oldDiscount.getId(), itemType, itemId, oldDiscount.getStatus());
			return;
		}
		
		// Logic: Chuy·ªÉn discount c≈© th√†nh REPLACED n·∫øu:
		// 1. Discount m·ªõi s·∫Øp b·∫Øt ƒë·∫ßu (startDate > now) - SCHEDULED
		// 2. Discount m·ªõi ƒë√£ b·∫Øt ƒë·∫ßu (startDate <= now) - ACTIVE
		if (newDiscount.getStartDate().isAfter(now)) {
			// Discount m·ªõi s·∫Øp b·∫Øt ƒë·∫ßu -> chuy·ªÉn c≈© th√†nh REPLACED
			oldDiscount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.REPLACED);
			discountRepository.save(oldDiscount);
			logger.info("üîÑ Chuy·ªÉn discount c≈© {} th√†nh REPLACED cho {} {} (discount m·ªõi s·∫Øp b·∫Øt ƒë·∫ßu: {})", 
				oldDiscount.getId(), itemType, itemId, newDiscount.getStartDate());
		} else {
			// Discount m·ªõi ƒë√£ b·∫Øt ƒë·∫ßu -> chuy·ªÉn c≈© th√†nh REPLACED
			oldDiscount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.REPLACED);
			discountRepository.save(oldDiscount);
			logger.info("üîÑ Chuy·ªÉn discount c≈© {} th√†nh REPLACED cho {} {} (discount m·ªõi ƒë√£ b·∫Øt ƒë·∫ßu: {})", 
				oldDiscount.getId(), itemType, itemId, newDiscount.getStartDate());
		}
	}

	// Get active discount for a specific dish
	@Transactional(readOnly = true)
	public Optional<DiscountResponseDTO> getActiveDiscountForDish(Long dishId) {
		logger.info("Getting active discount for dish: {}", dishId);
		
		com.poly.restaurant.entities.DishEntity dish = dishRepository.findById(dishId)
			.orElseThrow(() -> new RuntimeException("Dish not found with id: " + dishId));
		
		if (dish.getDiscount() != null) {
			// Initialize lazy-loaded discount
			try {
				dish.getDiscount().getId(); // Force initialization
				dish.getDiscount().getStatus();
				dish.getDiscount().getStartDate();
				dish.getDiscount().getEndDate();
			} catch (Exception e) {
				logger.error("Error initializing discount for dish {}: {}", dishId, e.getMessage());
				return Optional.empty();
			}
			
			// Check if discount is still active
			LocalDateTime now = LocalDateTime.now();
			if (dish.getDiscount().getStatus().toString().equals("ACTIVE") &&
				dish.getDiscount().getStartDate().isBefore(now) &&
				dish.getDiscount().getEndDate().isAfter(now)) {
				
				return Optional.of(DiscountMapper.toResponseDto(dish.getDiscount()));
			}
		}
		
		return Optional.empty();
	}

	// Get active discount for a specific combo
	@Transactional(readOnly = true)
	public Optional<DiscountResponseDTO> getActiveDiscountForCombo(Long comboId) {
		logger.info("Getting active discount for combo: {}", comboId);
		
		com.poly.restaurant.entities.ComboEntity combo = comboRepository.findById(comboId)
			.orElseThrow(() -> new RuntimeException("Combo not found with id: " + comboId));
		
		if (combo.getDiscount() != null) {
			// Initialize lazy-loaded discount
			try {
				combo.getDiscount().getId(); // Force initialization
				combo.getDiscount().getStatus();
				combo.getDiscount().getStartDate();
				combo.getDiscount().getEndDate();
			} catch (Exception e) {
				logger.error("Error initializing discount for combo {}: {}", comboId, e.getMessage());
				return Optional.empty();
			}
			
			// Check if discount is still active
			LocalDateTime now = LocalDateTime.now();
			if (combo.getDiscount().getStatus().toString().equals("ACTIVE") &&
				combo.getDiscount().getStartDate().isBefore(now) &&
				combo.getDiscount().getEndDate().isAfter(now)) {
				
				return Optional.of(DiscountMapper.toResponseDto(combo.getDiscount()));
			}
		}
		
		return Optional.empty();
	}

	// T·ª± ƒë·ªông √°p d·ª•ng discount khi ƒë·∫øn gi·ªù
	@Transactional
	public void autoApplyDiscounts() {
		logger.info("Auto-applying discounts that are ready to start...");
		
		// T√¨m c√°c discount c√≥ startDate <= now v√† status = SCHEDULED
		List<DiscountEntity> readyDiscounts = discountRepository.findByStatusAndStartDateLessThanEqual(
			com.poly.restaurant.entities.enums.DiscountStatus.SCHEDULED, 
			LocalDateTime.now()
		);
		
		for (DiscountEntity discount : readyDiscounts) {
			try {
				// C·∫≠p nh·∫≠t status th√†nh ACTIVE
				discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE);
				discountRepository.save(discount);
				
				// T·ª± ƒë·ªông √°p d·ª•ng cho m√≥n ƒÉn/combo d·ª±a tr√™n t√™n discount
				autoApplyDiscountToItems(discount);
				
				logger.info("Auto-applied discount {} to items", discount.getId());
			} catch (Exception e) {
				logger.error("Error auto-applying discount {}: {}", discount.getId(), e.getMessage());
			}
		}
	}

	// T·ª± ƒë·ªông g·ª° b·ªè discount khi h·∫øt h·∫°n
	@Transactional
	public void autoRemoveExpiredDiscounts() {
		logger.info("Auto-removing expired discounts...");
		
		// T√¨m c√°c discount c√≥ endDate < now v√† status = ACTIVE
		List<DiscountEntity> expiredDiscounts = discountRepository.findByStatusAndEndDateLessThan(
			com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE, 
			LocalDateTime.now()
		);
		
		for (DiscountEntity discount : expiredDiscounts) {
			try {
				// C·∫≠p nh·∫≠t status th√†nh EXPIRED
				discount.setStatus(com.poly.restaurant.entities.enums.DiscountStatus.EXPIRED);
				discountRepository.save(discount);
				
				// G·ª° b·ªè kh·ªèi m√≥n ƒÉn/combo
				autoRemoveDiscountFromItems(discount);
				
				logger.info("Auto-removed expired discount {}", discount.getId());
			} catch (Exception e) {
				logger.error("Error auto-removing discount {}: {}", discount.getId(), e.getMessage());
			}
		}
	}

	// T·ª± ƒë·ªông √°p d·ª•ng discount cho m√≥n ƒÉn/combo d·ª±a tr√™n t√™n
	private void autoApplyDiscountToItems(DiscountEntity discount) {
		String discountName = discount.getName();
		
		// T√¨m m√≥n ƒÉn c√≥ t√™n t∆∞∆°ng ·ª©ng
		if (discountName.contains("Coca Cola")) {
			com.poly.restaurant.entities.DishEntity dish = dishRepository.findByName("Coca Cola").orElse(null);
			if (dish != null) {
				dish.setDiscount(discount);
				dishRepository.save(dish);
				logger.info("Auto-applied discount {} to dish: Coca Cola", discount.getId());
			}
		} else if (discountName.contains("B√∫n b√≤ Hu·∫ø")) {
			com.poly.restaurant.entities.DishEntity dish = dishRepository.findByName("B√∫n b√≤ Hu·∫ø").orElse(null);
			if (dish != null) {
				dish.setDiscount(discount);
				dishRepository.save(dish);
				logger.info("Auto-applied discount {} to dish: B√∫n b√≤ Hu·∫ø", discount.getId());
			}
		} else if (discountName.contains("M√¨ Qu·∫£ng g√†")) {
			com.poly.restaurant.entities.DishEntity dish = dishRepository.findByName("M√¨ Qu·∫£ng g√†").orElse(null);
			if (dish != null) {
				dish.setDiscount(discount);
				dishRepository.save(dish);
				logger.info("Auto-applied discount {} to dish: M√¨ Qu·∫£ng g√†", discount.getId());
			}
		} else if (discountName.contains("Combo H·∫£i S·∫£n L·ªõn")) {
			com.poly.restaurant.entities.ComboEntity combo = comboRepository.findByName("Combo H·∫£i S·∫£n L·ªõn").orElse(null);
			if (combo != null) {
				combo.setDiscount(discount);
				comboRepository.save(combo);
				logger.info("Auto-applied discount {} to combo: Combo H·∫£i S·∫£n L·ªõn", discount.getId());
			}
		}
		// C√≥ th·ªÉ th√™m logic cho c√°c m√≥n kh√°c
	}

	// T·ª± ƒë·ªông g·ª° b·ªè discount kh·ªèi m√≥n ƒÉn/combo
	private void autoRemoveDiscountFromItems(DiscountEntity discount) {
		// G·ª° b·ªè kh·ªèi t·∫•t c·∫£ m√≥n ƒÉn
		List<com.poly.restaurant.entities.DishEntity> dishesWithDiscount = dishRepository.findByDiscount(discount);
		for (com.poly.restaurant.entities.DishEntity dish : dishesWithDiscount) {
			dish.setDiscount(null);
			dishRepository.save(dish);
			logger.info("Auto-removed discount {} from dish: {}", discount.getId(), dish.getName());
		}
		
		// G·ª° b·ªè kh·ªèi t·∫•t c·∫£ combo
		List<com.poly.restaurant.entities.ComboEntity> combosWithDiscount = comboRepository.findByDiscount(discount);
		for (com.poly.restaurant.entities.ComboEntity combo : combosWithDiscount) {
			combo.setDiscount(null);
			comboRepository.save(combo);
			logger.info("Auto-removed discount {} from combo: {}", discount.getId(), combo.getName());
		}
	}

	// T√¨m voucher theo code
	@Transactional(readOnly = true)
	public Optional<DiscountResponseDTO> getDiscountByCode(String code) {
		logger.info("Getting discount by code: {}", code);
		
		Optional<DiscountEntity> entity = discountRepository.findByCode(code);
		
		if (entity.isPresent()) {
			DiscountEntity discount = entity.get();
			
			// Ki·ªÉm tra voucher c√≥ c√≤n h·∫°n s·ª≠ d·ª•ng kh√¥ng
			LocalDateTime now = LocalDateTime.now();
			if (discount.getStatus() == com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE &&
				discount.getStartDate().isBefore(now) &&
				discount.getEndDate().isAfter(now)) {
				
				logger.info("Found active discount with code: {}", code);
				return Optional.of(DiscountMapper.toResponseDto(discount));
			} else {
				logger.warn("Discount with code {} is not active or expired", code);
				return Optional.empty();
			}
		}
		
		logger.warn("Discount not found with code: {}", code);
		return Optional.empty();
	}

	// Validate voucher tr∆∞·ªõc khi s·ª≠ d·ª•ng
	@Transactional(readOnly = true)
	public boolean validateVoucher(String voucherCode, Long dishId, Long comboId) {
		logger.info("Validating voucher: {} for dish: {} or combo: {}", voucherCode, dishId, comboId);
		
		Optional<DiscountEntity> voucherOpt = discountRepository.findByCode(voucherCode);
		
		if (!voucherOpt.isPresent()) {
			logger.warn("Voucher not found with code: {}", voucherCode);
			return false;
		}
		
		DiscountEntity voucher = voucherOpt.get();
		LocalDateTime now = LocalDateTime.now();
		
		// Ki·ªÉm tra voucher c√≥ c√≤n h·∫°n s·ª≠ d·ª•ng kh√¥ng
		if (voucher.getStatus() != com.poly.restaurant.entities.enums.DiscountStatus.ACTIVE) {
			logger.warn("Voucher {} is not active, status: {}", voucherCode, voucher.getStatus());
			return false;
		}
		
		if (voucher.getStartDate().isAfter(now)) {
			logger.warn("Voucher {} has not started yet, start date: {}", voucherCode, voucher.getStartDate());
			return false;
		}
		
		if (voucher.getEndDate().isBefore(now)) {
			logger.warn("Voucher {} has expired, end date: {}", voucherCode, voucher.getEndDate());
			return false;
		}
		
		// Ki·ªÉm tra voucher c√≥ √°p d·ª•ng cho m√≥n ƒÉn/combo n√†y kh√¥ng
		if (dishId != null) {
			com.poly.restaurant.entities.DishEntity dish = dishRepository.findById(dishId).orElse(null);
			if (dish != null && dish.getDiscount() != null && dish.getDiscount().getId().equals(voucher.getId())) {
				logger.info("Voucher {} is valid for dish {}", voucherCode, dishId);
				return true;
			}
		}
		
		if (comboId != null) {
			com.poly.restaurant.entities.ComboEntity combo = comboRepository.findById(comboId).orElse(null);
			if (combo != null && combo.getDiscount() != null && combo.getDiscount().getId().equals(voucher.getId())) {
				logger.info("Voucher {} is valid for combo {}", voucherCode, comboId);
				return true;
			}
		}
		
		logger.warn("Voucher {} is not applicable for dish {} or combo {}", voucherCode, dishId, comboId);
		return false;
	}

	// L·∫•y th√¥ng tin voucher ƒë·ªÉ √°p d·ª•ng
	@Transactional(readOnly = true)
	public Optional<DiscountResponseDTO> getValidVoucherForItem(String voucherCode, Long dishId, Long comboId) {
		if (validateVoucher(voucherCode, dishId, comboId)) {
			return getDiscountByCode(voucherCode);
		}
		return Optional.empty();
	}
}