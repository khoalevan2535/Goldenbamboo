package com.poly.restaurant.services;

import com.poly.restaurant.dto.GHTKOrderRequest;
import com.poly.restaurant.dto.GHTKOrderResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.util.List;
import java.util.ArrayList;

@Service
public class GHTKService {
    
    @Value("${ghtk.token:2N0Uv6JWHdTCHUsuc2nfqFeXJ8cYtzyz6kGhtUo}")
    private String ghtkToken;
    
    @Value("${ghtk.partner-code:S22737331}")
    private String partnerCode;

    private final String baseUrl = "https://services.giaohangtietkiem.vn";
    private final RestTemplate restTemplate = new RestTemplate();

    public GHTKOrderResponse createOrder(GHTKOrderRequest orderRequest) {
        try {
            System.out.println("üöö Creating GHTK order with token: " + ghtkToken);
            System.out.println("üè¢ Partner code: " + partnerCode);
            System.out.println("üìã Order request: " + orderRequest);
            System.out.println("üí∞ Order value: " + orderRequest.getOrder().getValue());
            System.out.println("üí∞ Pick money: " + orderRequest.getOrder().getPick_money());
            System.out.println("üöö Is freeship: " + orderRequest.getOrder().getIs_freeship());
            System.out.println("üì¶ Pick option: " + orderRequest.getOrder().getPick_option());
            System.out.println("üì¶ Products count: " + orderRequest.getProducts().size());
            double totalWeight = orderRequest.getProducts().stream()
                .mapToDouble(product -> product.getWeight() * product.getQuantity())
                .sum();
            System.out.println("‚öñÔ∏è Total weight: " + totalWeight + "kg");
            System.out.println("üìç Customer address: " + orderRequest.getOrder().getAddress());
            System.out.println("üìç Customer province: " + orderRequest.getOrder().getProvince());
            System.out.println("üìç Customer district: " + orderRequest.getOrder().getDistrict());
            System.out.println("üìç Customer ward: " + orderRequest.getOrder().getWard());
            
            String url = baseUrl + "/services/shipment/order";
            System.out.println("üåê GHTK API URL: " + url);
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Token", ghtkToken);
            headers.set("X-Client-Source", partnerCode);
            headers.set("Content-Type", "application/json");
            
            HttpEntity<GHTKOrderRequest> request = new HttpEntity<>(orderRequest, headers);
            
            ResponseEntity<String> response = restTemplate.postForEntity(
                url, request, String.class
            );
            
            System.out.println("üìä Response status: " + response.getStatusCode());
            System.out.println("üìä Response headers: " + response.getHeaders());
            System.out.println("üìä Response body: " + response.getBody());
            
            if (response.getStatusCode().is2xxSuccessful()) {
                // Parse JSON response manually
                String responseBody = response.getBody();
                if (responseBody != null && responseBody.contains("success")) {
                    // Simple success response
                    GHTKOrderResponse ghtkResponse = new GHTKOrderResponse();
                    ghtkResponse.setSuccess(true);
                    ghtkResponse.setMessage("Order created successfully");
                    System.out.println("‚úÖ GHTK order created successfully");
                    return ghtkResponse;
                } else {
                    throw new RuntimeException("Invalid response format from GHTK: " + responseBody);
                }
            } else {
                throw new RuntimeException("GHTK API returned error: " + response.getStatusCode() + " - " + response.getBody());
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error creating GHTK order: " + e.getMessage());
            System.err.println("‚ùå Error type: " + e.getClass().getSimpleName());
            if (e.getMessage() != null) {
                System.err.println("‚ùå Error details: " + e.getMessage());
            }
            e.printStackTrace();
            throw new RuntimeException("Error creating GHTK order: " + e.getMessage(), e);
        }
    }

    public boolean testConnection() {
        try {
            String url = baseUrl + "/services/shipment/order";
            
        HttpHeaders headers = new HttpHeaders();
        headers.set("Token", ghtkToken);
        headers.set("Content-Type", "application/json");
            
            HttpEntity<String> request = new HttpEntity<>(headers);
            
            ResponseEntity<String> response = restTemplate.exchange(
                url, HttpMethod.GET, request, String.class
            );
            
            return response.getStatusCode().is2xxSuccessful();
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * T·∫°o ƒë∆°n GHTK t·ª´ OrderEntity
     */
    public String createOrderFromOrderEntity(com.poly.restaurant.entities.OrderEntity order) {
        try {
            System.out.println("üöö Creating GHTK order from OrderEntity: " + order.getId());
            
            // T·∫°o GHTKOrderRequest t·ª´ OrderEntity
            GHTKOrderRequest ghtkRequest = new GHTKOrderRequest();
            
            // T·∫°o order info
            GHTKOrderRequest.GHTKOrderInfo orderInfo = new GHTKOrderRequest.GHTKOrderInfo();
            orderInfo.setId("ORDER_" + order.getId());
            orderInfo.setPick_name("Golden Bamboo Restaurant");
            orderInfo.setPick_address("Khu ƒë√¥ th·ªã du l·ªãch Marine Plaza, 32C Khu BTLK Ph∆∞·ªùng B√£i Ch√°y");
            orderInfo.setPick_province("Qu·∫£ng Ninh");
            orderInfo.setPick_district("Th√†nh ph·ªë H·∫° Long");
            orderInfo.setPick_ward("Ph∆∞·ªùng B√£i Ch√°y");
            orderInfo.setPick_tel("0285551234");
            
            // Th√¥ng tin ng∆∞·ªùi nh·∫≠n t·ª´ delivery address
            if (order.getDeliveryAddress() != null) {
                orderInfo.setName(order.getDeliveryAddress().getRecipientName());
                orderInfo.setAddress(order.getDeliveryAddress().getAddress());
                orderInfo.setProvince(order.getDeliveryAddress().getProvince());
                orderInfo.setDistrict(order.getDeliveryAddress().getDistrict());
                orderInfo.setWard(order.getDeliveryAddress().getWard());
                orderInfo.setTel(order.getDeliveryAddress().getPhoneNumber());
            } else {
                // Fallback n·∫øu kh√¥ng c√≥ delivery address
                orderInfo.setName("Kh√°ch h√†ng");
                orderInfo.setAddress("ƒê·ªãa ch·ªâ kh√¥ng x√°c ƒë·ªãnh");
                orderInfo.setProvince("H√† N·ªôi");
                orderInfo.setDistrict("Qu·∫≠n Ba ƒê√¨nh");
                orderInfo.setWard("Ph∆∞·ªùng Ph√∫c X√°");
                orderInfo.setTel("0123456789");
            }
            
            orderInfo.setValue(order.getTotalAmount().intValue());
            orderInfo.setPick_money(order.getTotalAmount().intValue());
            orderInfo.setIs_freeship("0");
            orderInfo.setPick_option("cod");
            
            ghtkRequest.setOrder(orderInfo);
            
            // T·∫°o danh s√°ch s·∫£n ph·∫©m
            List<GHTKOrderRequest.GHTKProduct> products = new ArrayList<>();
            for (com.poly.restaurant.entities.OrderItemEntity item : order.getOrderItems()) {
                GHTKOrderRequest.GHTKProduct product = new GHTKOrderRequest.GHTKProduct();
                product.setName(item.getDish() != null ? item.getDish().getName() : 
                               item.getCombo() != null ? item.getCombo().getName() : "S·∫£n ph·∫©m");
                product.setWeight(0.5); // Default weight 0.5kg
                product.setQuantity(item.getQuantity());
                product.setProduct_code(item.getId().toString());
                products.add(product);
            }
            ghtkRequest.setProducts(products);
            
            // G·ªçi API GHTK
            GHTKOrderResponse response = createOrder(ghtkRequest);
            
            if (response.isSuccess()) {
                return response.getOrder() != null ? response.getOrder().getLabel() : "GHTK_" + order.getId();
            } else {
                throw new RuntimeException("GHTK order creation failed: " + response.getMessage());
            }
            
        } catch (Exception e) {
            System.err.println("Error creating GHTK order from OrderEntity: " + e.getMessage());
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n GHTK: " + e.getMessage());
        }
    }
}